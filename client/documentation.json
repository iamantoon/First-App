{
    "pipes": [],
    "interfaces": [
        {
            "name": "Activity",
            "id": "interface-Activity-6881e87be29ff4c59dfe591909c8433d353846bec060d318533d27d568329ee2d67389ac6695e9e82b5c1724651b85262b7879b70bbf1cae076966f5fea8811e",
            "file": "src/app/modules/history/models/activity.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Activity {\r\n    id: number;\r\n    cardName: string;\r\n    activityName: string;\r\n    listName: string;\r\n    previous: string;\r\n    updated: string;\r\n    date: Date;\r\n}\r\n\r\nexport interface ActivityResponse {\r\n    activities: Activity[];\r\n    pageSize: number;\r\n    totalCount: number;\r\n}",
            "properties": [
                {
                    "name": "activityName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "cardName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "listName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "previous",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "updated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ActivityResponse",
            "id": "interface-ActivityResponse-6881e87be29ff4c59dfe591909c8433d353846bec060d318533d27d568329ee2d67389ac6695e9e82b5c1724651b85262b7879b70bbf1cae076966f5fea8811e",
            "file": "src/app/modules/history/models/activity.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Activity {\r\n    id: number;\r\n    cardName: string;\r\n    activityName: string;\r\n    listName: string;\r\n    previous: string;\r\n    updated: string;\r\n    date: Date;\r\n}\r\n\r\nexport interface ActivityResponse {\r\n    activities: Activity[];\r\n    pageSize: number;\r\n    totalCount: number;\r\n}",
            "properties": [
                {
                    "name": "activities",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Activity[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "pageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "totalCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Board",
            "id": "interface-Board-fca1ea2fac3cc7493b22dbd04db70e3debde9a280a90704687e250f566d51dafefda431dcfd209d28c94c56cdc8294acd8f5062a953b0869c71a2ca3645a72d6",
            "file": "src/app/modules/boards/models/board.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { List, ListsWithIds } from \"../../lists/models/list\";\r\n\r\nexport interface Board {\r\n    id: number;\r\n    name: string;\r\n    lists: List[];\r\n    listNames: ListsWithIds[];\r\n}\r\n\r\nexport interface BoardName {\r\n    id: number;\r\n    name: string;\r\n}\r\n\r\nexport interface BoardsResponse {\r\n    boards: Board[];\r\n    boardNames: BoardName[];\r\n}\r\n\r\nexport interface EditBoard {\r\n    id: number;\r\n    name: string; \r\n}",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "listNames",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ListsWithIds[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "lists",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "List[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "BoardName",
            "id": "interface-BoardName-fca1ea2fac3cc7493b22dbd04db70e3debde9a280a90704687e250f566d51dafefda431dcfd209d28c94c56cdc8294acd8f5062a953b0869c71a2ca3645a72d6",
            "file": "src/app/modules/boards/models/board.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { List, ListsWithIds } from \"../../lists/models/list\";\r\n\r\nexport interface Board {\r\n    id: number;\r\n    name: string;\r\n    lists: List[];\r\n    listNames: ListsWithIds[];\r\n}\r\n\r\nexport interface BoardName {\r\n    id: number;\r\n    name: string;\r\n}\r\n\r\nexport interface BoardsResponse {\r\n    boards: Board[];\r\n    boardNames: BoardName[];\r\n}\r\n\r\nexport interface EditBoard {\r\n    id: number;\r\n    name: string; \r\n}",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "BoardsResponse",
            "id": "interface-BoardsResponse-fca1ea2fac3cc7493b22dbd04db70e3debde9a280a90704687e250f566d51dafefda431dcfd209d28c94c56cdc8294acd8f5062a953b0869c71a2ca3645a72d6",
            "file": "src/app/modules/boards/models/board.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { List, ListsWithIds } from \"../../lists/models/list\";\r\n\r\nexport interface Board {\r\n    id: number;\r\n    name: string;\r\n    lists: List[];\r\n    listNames: ListsWithIds[];\r\n}\r\n\r\nexport interface BoardName {\r\n    id: number;\r\n    name: string;\r\n}\r\n\r\nexport interface BoardsResponse {\r\n    boards: Board[];\r\n    boardNames: BoardName[];\r\n}\r\n\r\nexport interface EditBoard {\r\n    id: number;\r\n    name: string; \r\n}",
            "properties": [
                {
                    "name": "boardNames",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BoardName[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "boards",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Board[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Card",
            "id": "interface-Card-ec12b0d83e457268a4823c6b454748b27706069cc8325b64f1b279529df682dec4e022b9e2f7bf3c9ff2f1a05d26f33686b3670a935b215b0de989fd67686ee1",
            "file": "src/app/modules/cards/models/card.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Card {\r\n    id: number;\r\n    name: string;\r\n    description: string;\r\n    dueDate: string;\r\n    priority: string;\r\n    list: string;\r\n    listId: number;\r\n    boardId: number;\r\n}",
            "properties": [
                {
                    "name": "boardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "dueDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "list",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "listId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "priority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CreatedList",
            "id": "interface-CreatedList-41eb8970ef358407e48a7523e9d0cd5d249873ca14d236a9a9ec3bc2b71ea4e557bb52784aa1315924913de289dbad7b016809fc32d73e7074ef8c3749c44dec",
            "file": "src/app/modules/lists/models/list.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Card } from \"../../cards/models/card\";\r\n\r\nexport interface Lists {\r\n    lists: List[];\r\n    listNames: ListsWithIds[];\r\n}\r\n\r\nexport interface List {\r\n    id: number;\r\n    name: string;\r\n    cards: Card[];\r\n}\r\n\r\nexport interface ListsWithIds {\r\n    id: number;\r\n    name: string;\r\n}\r\n\r\nexport interface CreateList {\r\n    name: string;\r\n    boardId: number;\r\n}\r\n\r\nexport interface CreatedList extends CreateList {\r\n    id: number;\r\n}\r\n\r\nexport interface EditList {\r\n    listId: number;\r\n    name: string;\r\n}",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "CreateList"
            ]
        },
        {
            "name": "CreateList",
            "id": "interface-CreateList-41eb8970ef358407e48a7523e9d0cd5d249873ca14d236a9a9ec3bc2b71ea4e557bb52784aa1315924913de289dbad7b016809fc32d73e7074ef8c3749c44dec",
            "file": "src/app/modules/lists/models/list.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Card } from \"../../cards/models/card\";\r\n\r\nexport interface Lists {\r\n    lists: List[];\r\n    listNames: ListsWithIds[];\r\n}\r\n\r\nexport interface List {\r\n    id: number;\r\n    name: string;\r\n    cards: Card[];\r\n}\r\n\r\nexport interface ListsWithIds {\r\n    id: number;\r\n    name: string;\r\n}\r\n\r\nexport interface CreateList {\r\n    name: string;\r\n    boardId: number;\r\n}\r\n\r\nexport interface CreatedList extends CreateList {\r\n    id: number;\r\n}\r\n\r\nexport interface EditList {\r\n    listId: number;\r\n    name: string;\r\n}",
            "properties": [
                {
                    "name": "boardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "EditBoard",
            "id": "interface-EditBoard-fca1ea2fac3cc7493b22dbd04db70e3debde9a280a90704687e250f566d51dafefda431dcfd209d28c94c56cdc8294acd8f5062a953b0869c71a2ca3645a72d6",
            "file": "src/app/modules/boards/models/board.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { List, ListsWithIds } from \"../../lists/models/list\";\r\n\r\nexport interface Board {\r\n    id: number;\r\n    name: string;\r\n    lists: List[];\r\n    listNames: ListsWithIds[];\r\n}\r\n\r\nexport interface BoardName {\r\n    id: number;\r\n    name: string;\r\n}\r\n\r\nexport interface BoardsResponse {\r\n    boards: Board[];\r\n    boardNames: BoardName[];\r\n}\r\n\r\nexport interface EditBoard {\r\n    id: number;\r\n    name: string; \r\n}",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "EditList",
            "id": "interface-EditList-41eb8970ef358407e48a7523e9d0cd5d249873ca14d236a9a9ec3bc2b71ea4e557bb52784aa1315924913de289dbad7b016809fc32d73e7074ef8c3749c44dec",
            "file": "src/app/modules/lists/models/list.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Card } from \"../../cards/models/card\";\r\n\r\nexport interface Lists {\r\n    lists: List[];\r\n    listNames: ListsWithIds[];\r\n}\r\n\r\nexport interface List {\r\n    id: number;\r\n    name: string;\r\n    cards: Card[];\r\n}\r\n\r\nexport interface ListsWithIds {\r\n    id: number;\r\n    name: string;\r\n}\r\n\r\nexport interface CreateList {\r\n    name: string;\r\n    boardId: number;\r\n}\r\n\r\nexport interface CreatedList extends CreateList {\r\n    id: number;\r\n}\r\n\r\nexport interface EditList {\r\n    listId: number;\r\n    name: string;\r\n}",
            "properties": [
                {
                    "name": "listId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "List",
            "id": "interface-List-41eb8970ef358407e48a7523e9d0cd5d249873ca14d236a9a9ec3bc2b71ea4e557bb52784aa1315924913de289dbad7b016809fc32d73e7074ef8c3749c44dec",
            "file": "src/app/modules/lists/models/list.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Card } from \"../../cards/models/card\";\r\n\r\nexport interface Lists {\r\n    lists: List[];\r\n    listNames: ListsWithIds[];\r\n}\r\n\r\nexport interface List {\r\n    id: number;\r\n    name: string;\r\n    cards: Card[];\r\n}\r\n\r\nexport interface ListsWithIds {\r\n    id: number;\r\n    name: string;\r\n}\r\n\r\nexport interface CreateList {\r\n    name: string;\r\n    boardId: number;\r\n}\r\n\r\nexport interface CreatedList extends CreateList {\r\n    id: number;\r\n}\r\n\r\nexport interface EditList {\r\n    listId: number;\r\n    name: string;\r\n}",
            "properties": [
                {
                    "name": "cards",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Card[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "List",
            "id": "interface-List-cd3683df429c16df8db635c3e0e9bdebc34fc30dcd8252064e400546a31f6f7da9d86ab55a955f9be01b4e90ea5f71ae2ca46af23bb6e51c5f03505f8cce8125-1",
            "file": "src/app/modules/modals/models/list.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface List {\r\n    id?: number;\r\n    name?: string;\r\n}",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "List-1"
        },
        {
            "name": "Lists",
            "id": "interface-Lists-41eb8970ef358407e48a7523e9d0cd5d249873ca14d236a9a9ec3bc2b71ea4e557bb52784aa1315924913de289dbad7b016809fc32d73e7074ef8c3749c44dec",
            "file": "src/app/modules/lists/models/list.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Card } from \"../../cards/models/card\";\r\n\r\nexport interface Lists {\r\n    lists: List[];\r\n    listNames: ListsWithIds[];\r\n}\r\n\r\nexport interface List {\r\n    id: number;\r\n    name: string;\r\n    cards: Card[];\r\n}\r\n\r\nexport interface ListsWithIds {\r\n    id: number;\r\n    name: string;\r\n}\r\n\r\nexport interface CreateList {\r\n    name: string;\r\n    boardId: number;\r\n}\r\n\r\nexport interface CreatedList extends CreateList {\r\n    id: number;\r\n}\r\n\r\nexport interface EditList {\r\n    listId: number;\r\n    name: string;\r\n}",
            "properties": [
                {
                    "name": "listNames",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ListsWithIds[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "lists",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "List[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ListsWithIds",
            "id": "interface-ListsWithIds-41eb8970ef358407e48a7523e9d0cd5d249873ca14d236a9a9ec3bc2b71ea4e557bb52784aa1315924913de289dbad7b016809fc32d73e7074ef8c3749c44dec",
            "file": "src/app/modules/lists/models/list.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Card } from \"../../cards/models/card\";\r\n\r\nexport interface Lists {\r\n    lists: List[];\r\n    listNames: ListsWithIds[];\r\n}\r\n\r\nexport interface List {\r\n    id: number;\r\n    name: string;\r\n    cards: Card[];\r\n}\r\n\r\nexport interface ListsWithIds {\r\n    id: number;\r\n    name: string;\r\n}\r\n\r\nexport interface CreateList {\r\n    name: string;\r\n    boardId: number;\r\n}\r\n\r\nexport interface CreatedList extends CreateList {\r\n    id: number;\r\n}\r\n\r\nexport interface EditList {\r\n    listId: number;\r\n    name: string;\r\n}",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "BoardEffects",
            "id": "injectable-BoardEffects-7b0c3f332ae073ed026593150de6f8517c2da387a84b7569503605e265e263fd7b4542f389f262242b8181cf17bd8a8aa64fa0388bd6ec72003ee432323321ad",
            "file": "src/app/modules/core/store/effects/board.effects.ts",
            "properties": [
                {
                    "name": "createCard$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\r\n        ofType(createCard),\r\n        switchMap((action) => {\r\n            const newCard = {\r\n                name: action.card.name,\r\n                description: action.card.description,\r\n                dueDate: action.card.dueDate,\r\n                priority: action.card.priority,\r\n                listId: action.card.listId,\r\n                boardId: action.card.boardId\r\n            };\r\n            return this.cardsService.createCard(newCard).pipe(\r\n                map((data: any) => {\r\n                    const card: Partial<Card> = {\r\n                        id: data.id,\r\n                        name: data.name,\r\n                        description: data.description,\r\n                        dueDate: data.dueDate,\r\n                        priority: data.priority,\r\n                        listId: action.card.listId\r\n                    };\r\n                    return createCardSuccess({card});\r\n                })\r\n            );\r\n        })\r\n    ))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "createList$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\r\n        ofType(createList),\r\n        switchMap((action) => {\r\n            return this.listsService.createList({boardId: action.list.boardId, name: action.list.name}).pipe(\r\n                map((data: any) => {\r\n                    const list: CreatedList = {\r\n                        id: data.id,\r\n                        boardId: data.boardId,\r\n                        name: data.name\r\n                    };\r\n                    return createListSuccess({ list });\r\n                })\r\n            );\r\n        })\r\n    ))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "deleteCard$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\r\n        ofType(deleteCard),\r\n        switchMap((action) => {\r\n            return this.cardsService.deleteCard(action.id).pipe(\r\n                switchMap(() => {\r\n                    return of(deleteCardSuccess({ id: action.id }));\r\n                })\r\n            );\r\n        })\r\n    ))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 88
                },
                {
                    "name": "deleteList$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\r\n        ofType(deleteList),\r\n        switchMap((action) => {\r\n            return this.listsService.deleteList(action.id).pipe(\r\n                switchMap(() => {\r\n                    return of(deleteListSuccess({ id: action.id }));\r\n                })\r\n            );\r\n        })\r\n    ))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "editCard$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\r\n        ofType(editCard),\r\n        switchMap((action) => {\r\n            return this.cardsService.editCard(action.payload.id!, action.payload).pipe(\r\n                map(() => editCardSuccess({ card: action.payload }))\r\n            );\r\n        })\r\n    ))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 99
                },
                {
                    "name": "editList$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\r\n        ofType(editList),\r\n        switchMap((action) => this.listsService.editList(action.list).pipe(map(() => editListSuccess(action))))\r\n    ))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "getBoard$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\r\n        ofType(getBoard),\r\n        switchMap((action) => {\r\n            return this.boardsService.getBoard(action.id).pipe(\r\n                map((board: Board) => {\r\n                    return getBoardSuccess({ board });\r\n                })\r\n            );\r\n        })\r\n    ))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { Actions, createEffect, ofType } from \"@ngrx/effects\";\r\nimport { getBoard, getBoardSuccess } from \"../actions/boards.action\";\r\nimport { map, of, switchMap } from \"rxjs\";\r\nimport { Board } from \"src/app/modules/boards/models/board\";\r\nimport { BoardsService } from \"src/app/modules/boards/services/boards.service\";\r\nimport { ListsService } from \"src/app/modules/lists/services/lists.service\";\r\nimport { CardsService } from \"src/app/modules/cards/services/cards.service\";\r\nimport { createList, createListSuccess, deleteList, deleteListSuccess, editList, editListSuccess } from \"../actions/board.action\";\r\nimport { CreatedList } from \"src/app/modules/lists/models/list\";\r\nimport { createCard, createCardSuccess, deleteCard, deleteCardSuccess, editCard, editCardSuccess } from \"../actions/board.action\";\r\nimport { Card } from \"src/app/modules/cards/models/card\";\r\n\r\n@Injectable()\r\nexport class BoardEffects {\r\n    constructor(private actions$: Actions, private boardsService: BoardsService, private listsService: ListsService, private cardsService: CardsService){}\r\n\r\n    getBoard$ = createEffect(() => this.actions$.pipe(\r\n        ofType(getBoard),\r\n        switchMap((action) => {\r\n            return this.boardsService.getBoard(action.id).pipe(\r\n                map((board: Board) => {\r\n                    return getBoardSuccess({ board });\r\n                })\r\n            );\r\n        })\r\n    ));\r\n\r\n    createList$ = createEffect(() => this.actions$.pipe(\r\n        ofType(createList),\r\n        switchMap((action) => {\r\n            return this.listsService.createList({boardId: action.list.boardId, name: action.list.name}).pipe(\r\n                map((data: any) => {\r\n                    const list: CreatedList = {\r\n                        id: data.id,\r\n                        boardId: data.boardId,\r\n                        name: data.name\r\n                    };\r\n                    return createListSuccess({ list });\r\n                })\r\n            );\r\n        })\r\n    ));\r\n\r\n    deleteList$ = createEffect(() => this.actions$.pipe(\r\n        ofType(deleteList),\r\n        switchMap((action) => {\r\n            return this.listsService.deleteList(action.id).pipe(\r\n                switchMap(() => {\r\n                    return of(deleteListSuccess({ id: action.id }));\r\n                })\r\n            );\r\n        })\r\n    ));\r\n\r\n    editList$ = createEffect(() => this.actions$.pipe(\r\n        ofType(editList),\r\n        switchMap((action) => this.listsService.editList(action.list).pipe(map(() => editListSuccess(action))))\r\n    ));\r\n\r\n    createCard$ = createEffect(() => this.actions$.pipe(\r\n        ofType(createCard),\r\n        switchMap((action) => {\r\n            const newCard = {\r\n                name: action.card.name,\r\n                description: action.card.description,\r\n                dueDate: action.card.dueDate,\r\n                priority: action.card.priority,\r\n                listId: action.card.listId,\r\n                boardId: action.card.boardId\r\n            };\r\n            return this.cardsService.createCard(newCard).pipe(\r\n                map((data: any) => {\r\n                    const card: Partial<Card> = {\r\n                        id: data.id,\r\n                        name: data.name,\r\n                        description: data.description,\r\n                        dueDate: data.dueDate,\r\n                        priority: data.priority,\r\n                        listId: action.card.listId\r\n                    };\r\n                    return createCardSuccess({card});\r\n                })\r\n            );\r\n        })\r\n    ));\r\n\r\n    deleteCard$ = createEffect(() => this.actions$.pipe(\r\n        ofType(deleteCard),\r\n        switchMap((action) => {\r\n            return this.cardsService.deleteCard(action.id).pipe(\r\n                switchMap(() => {\r\n                    return of(deleteCardSuccess({ id: action.id }));\r\n                })\r\n            );\r\n        })\r\n    ));\r\n\r\n    editCard$ = createEffect(() => this.actions$.pipe(\r\n        ofType(editCard),\r\n        switchMap((action) => {\r\n            return this.cardsService.editCard(action.payload.id!, action.payload).pipe(\r\n                map(() => editCardSuccess({ card: action.payload }))\r\n            );\r\n        })\r\n    ));\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "boardsService",
                        "type": "BoardsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "listsService",
                        "type": "ListsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cardsService",
                        "type": "CardsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "boardsService",
                        "type": "BoardsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "listsService",
                        "type": "ListsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cardsService",
                        "type": "CardsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "BoardsEffects",
            "id": "injectable-BoardsEffects-1756d1ab153a29750ae7b6e628662278c2a93bb28562bdde8b767bfc26ca4241aa9e416e22d4940a3941d7441e8f0e7ff1fb622d6e6aecda3697995f0b3c2dee",
            "file": "src/app/modules/core/store/effects/boards.effects.ts",
            "properties": [
                {
                    "name": "createBoard$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\r\n        ofType(createBoard),\r\n        switchMap((action) => {\r\n            return this.boardsService.createBoard(action.board.name!).pipe(\r\n                map((data: any) => {\r\n                    const board: BoardName = {\r\n                        id: data.id,\r\n                        name: data.name\r\n                    };\r\n                    return createBoardSuccess({ board });\r\n                })\r\n            );\r\n        })\r\n    ))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "deleteBoard$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\r\n        ofType(deleteBoard),\r\n        switchMap((action) => {\r\n            return this.boardsService.deleteBoard(action.id).pipe(\r\n                switchMap(() => {\r\n                    return of(deleteBoardSuccess({ id: action.id }));\r\n                })\r\n            );\r\n        })\r\n    ))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "editBoard$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\r\n        ofType(editBoard),\r\n        switchMap((action) => this.boardsService.editBoard(action.payload).pipe(\r\n            map(() => {\r\n                return editBoardSuccess({ board: action.payload });\r\n            })\r\n        ))\r\n    ))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "getBoards$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\r\n        ofType(getBoards),\r\n        switchMap(() => {\r\n            return this.boardsService.getBoards().pipe(map((data) => getBoardsSuccess({ allBoards: data })))\r\n        })\r\n    ))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { Actions, createEffect, ofType } from \"@ngrx/effects\";\r\nimport { BoardsService } from \"src/app/modules/boards/services/boards.service\";\r\nimport { createBoard, createBoardSuccess, deleteBoard, deleteBoardSuccess, editBoard, editBoardSuccess, getBoards, getBoardsSuccess } from \"../actions/boards.action\";\r\nimport { catchError, map, of, switchMap } from \"rxjs\";\r\nimport { Board, BoardName } from \"src/app/modules/boards/models/board\";\r\n\r\n@Injectable()\r\nexport class BoardsEffects {\r\n    constructor(private actions$: Actions, private boardsService: BoardsService){}\r\n\r\n    getBoards$ = createEffect(() => this.actions$.pipe(\r\n        ofType(getBoards),\r\n        switchMap(() => {\r\n            return this.boardsService.getBoards().pipe(map((data) => getBoardsSuccess({ allBoards: data })))\r\n        })\r\n    ));\r\n\r\n    createBoard$ = createEffect(() => this.actions$.pipe(\r\n        ofType(createBoard),\r\n        switchMap((action) => {\r\n            return this.boardsService.createBoard(action.board.name!).pipe(\r\n                map((data: any) => {\r\n                    const board: BoardName = {\r\n                        id: data.id,\r\n                        name: data.name\r\n                    };\r\n                    return createBoardSuccess({ board });\r\n                })\r\n            );\r\n        })\r\n    ));\r\n\r\n    deleteBoard$ = createEffect(() => this.actions$.pipe(\r\n        ofType(deleteBoard),\r\n        switchMap((action) => {\r\n            return this.boardsService.deleteBoard(action.id).pipe(\r\n                switchMap(() => {\r\n                    return of(deleteBoardSuccess({ id: action.id }));\r\n                })\r\n            );\r\n        })\r\n    ));\r\n\r\n    editBoard$ = createEffect(() => this.actions$.pipe(\r\n        ofType(editBoard),\r\n        switchMap((action) => this.boardsService.editBoard(action.payload).pipe(\r\n            map(() => {\r\n                return editBoardSuccess({ board: action.payload });\r\n            })\r\n        ))\r\n    ));\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "boardsService",
                        "type": "BoardsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "boardsService",
                        "type": "BoardsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "BoardsService",
            "id": "injectable-BoardsService-e1e2f48907e43b577794f1461e7d88f02b7f0f0313f9d40198976dcc18994b5f64949b025b9b3ff702c8dea1f509724ceb3ea23cb1a6aeaa1b66c80b50ee8124",
            "file": "src/app/modules/boards/services/boards.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "environment.apiUrl + 'boards/'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "board$",
                    "defaultValue": "this.boardSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Board | null>",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "boardNames$",
                    "defaultValue": "this.boardNamesSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<[] | null>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "boardNamesSubject",
                    "defaultValue": "new BehaviorSubject<BoardName[] | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<[] | null>",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "boardSubject",
                    "defaultValue": "new BehaviorSubject<Board | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<Board | null>",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [
                {
                    "name": "createBoard",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteBoard",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editBoard",
                    "args": [
                        {
                            "name": "editedBoard",
                            "type": "EditBoard",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "editedBoard",
                            "type": "EditBoard",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBoard",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBoards",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setBoard",
                    "args": [
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setBoardNames",
                    "args": [
                        {
                            "name": "boards",
                            "type": "BoardName[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "boards",
                            "type": "BoardName[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { Board, BoardName, EditBoard } from '../models/board';\nimport { BehaviorSubject, Observable, map } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BoardsService {\n  baseUrl = environment.apiUrl + 'boards/';\n  boardSubject: BehaviorSubject<Board | null> = new BehaviorSubject<Board | null>(null);\n  board$: Observable<Board | null> = this.boardSubject.asObservable();\n\n  boardNamesSubject: BehaviorSubject<BoardName[] | null> = new BehaviorSubject<BoardName[] | null>(null);\n  boardNames$: Observable<BoardName[] | null> = this.boardNamesSubject.asObservable();\n\n  constructor(private http: HttpClient){}\n\n  getBoards(){\n    return this.http.get<BoardName[]>(this.baseUrl).pipe(\n      map(response => {\n        this.boardNamesSubject.next(response);\n        return response;\n      })\n    )\n  }\n\n  getBoard(id: number){\n    return this.http.get<Board>(this.baseUrl + id).pipe(\n      map(response => {\n        this.boardSubject.next(response);\n        return response;\n      })\n    )\n  }\n\n  createBoard(name: string){\n    return this.http.post(this.baseUrl, {name});\n  }\n\n  editBoard(editedBoard: EditBoard){\n    return this.http.patch(this.baseUrl, {id: editedBoard.id, name: editedBoard.name});\n  }\n\n  deleteBoard(id: number){\n    return this.http.delete(this.baseUrl + id);\n  }\n\n  setBoard(board: Board){\n    this.boardSubject.next(board);\n  }\n\n  setBoardNames(boards: BoardName[]){\n    this.boardNamesSubject.next(boards);\n  }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "CardsService",
            "id": "injectable-CardsService-e63395960c98b51e655d773ec88df4519a4f67fc5ed7e2067f547fbed45dd9e60b02565332aebc12e07fd73ef088af3a80c1ce43f9996301966fffeb18f614d7",
            "file": "src/app/modules/cards/services/cards.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "environment.apiUrl + 'cards/'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createCard",
                    "args": [
                        {
                            "name": "card",
                            "type": "Partial<Card>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "card",
                            "type": "Partial<Card>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteCard",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editCard",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "card",
                            "type": "Partial<Card>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "card",
                            "type": "Partial<Card>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Card } from '../models/card';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CardsService {\r\n  private baseUrl = environment.apiUrl + 'cards/';\r\n\r\n  constructor(private http: HttpClient){}\r\n\r\n  createCard(card: Partial<Card>){\r\n    return this.http.post(this.baseUrl, card);\r\n  }\r\n\r\n  editCard(id: number, card: Partial<Card>){\r\n    return this.http.patch(this.baseUrl, {id: id, ...card});\r\n  }\r\n\r\n  deleteCard(id: number){\r\n    return this.http.delete(this.baseUrl + id);\r\n  }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "FormatDateService",
            "id": "injectable-FormatDateService-86693d67c52cc9734ac9de395608cd484af24bcb3fb122298cb913bd1b5b45db786e21652e9b4030cf91461464b4067fdfbf82fd247e140bc39690c28b58adc6",
            "file": "src/app/modules/modals/services/format-date.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "formatDate",
                    "args": [
                        {
                            "name": "dateString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dateString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormatDateService {\n\n  constructor() {}\n\n  formatDate(dateString: string): string {\n    const date = new Date(dateString);\n    const year = date.getFullYear();\n    const month = ('0' + (date.getMonth() + 1)).slice(-2);\n    const day = ('0' + date.getDate()).slice(-2);\n    return `${year}-${month}-${day}`;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "HistoryService",
            "id": "injectable-HistoryService-2bf915b06d275a8ec99565e9494948c9a15f316d8893bae97b4d1c79cddd5c016109f86c654e9dcb4129f1761e5e0c78622cfbcea732b83ab7aed5af52870382",
            "file": "src/app/modules/history/services/history.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "environment.apiUrl + 'activity/'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [
                {
                    "name": "getLoggedActivity",
                    "args": [
                        {
                            "name": "boardId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "boardId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLoggedActivityByCardId",
                    "args": [
                        {
                            "name": "cardId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cardId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Activity, ActivityResponse } from '../models/activity';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HistoryService {\r\n  baseUrl = environment.apiUrl + 'activity/';\r\n\r\n  constructor(private http: HttpClient){}\r\n\r\n  getLoggedActivity(boardId: number, pageSize: number){  \r\n    let params = new HttpParams().set('pageSize', pageSize.toString());\r\n    params = params.set('boardId', boardId.toString());\r\n\r\n    return this.http.get<ActivityResponse>(this.baseUrl, {params});\r\n  }\r\n\r\n  getLoggedActivityByCardId(cardId: number){\r\n    return this.http.get<Activity[]>(this.baseUrl + cardId);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ListsService",
            "id": "injectable-ListsService-6f7e497b6401d075052a65a07e462971fb32efca28c45a99691cbf39db8098c0aac042ba6c6dcdb48800345fda1428922da20b1a1e0715834cd6893a7ceb6c1a",
            "file": "src/app/modules/lists/services/lists.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "environment.apiUrl + 'lists/'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [
                {
                    "name": "createList",
                    "args": [
                        {
                            "name": "newList",
                            "type": "CreateList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newList",
                            "type": "CreateList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteList",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editList",
                    "args": [
                        {
                            "name": "editedList",
                            "type": "EditList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "editedList",
                            "type": "EditList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { CreateList, EditList } from '../models/list';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ListsService {\r\n  baseUrl = environment.apiUrl + 'lists/';\r\n\r\n  constructor(private http: HttpClient){}\r\n\r\n  createList(newList: CreateList){\r\n    return this.http.post(this.baseUrl, {name: newList.name, boardId: newList.boardId});\r\n  }\r\n\r\n  editList(editedList: EditList){\r\n    return this.http.patch(this.baseUrl, {id: editedList.listId, name: editedList.name});\r\n  }\r\n\r\n  deleteList(id: number){\r\n    return this.http.delete(this.baseUrl + id);\r\n  }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "LoadingService",
            "id": "injectable-LoadingService-d5db26fbdbbeb69531a0905974de9d0b9099f50286c0318fd456687ffee80a631ab3e8daccfe645675c2c188046eddb75d39d0005484a43eed7530637a9592fd",
            "file": "src/app/modules/core/services/loading.service.ts",
            "properties": [
                {
                    "name": "loadingRequestCount",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [
                {
                    "name": "idle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loading",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { NgxSpinnerService } from 'ngx-spinner';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoadingService {\n  loadingRequestCount = 0;\n\n  constructor(private spinnerService: NgxSpinnerService){}\n\n  loading(){\n    this.loadingRequestCount++;\n    this.spinnerService.show(undefined, {\n      type: 'timer',\n      bdColor: 'rgba(255, 255, 255, 0)',\n      color: '#333'\n    });\n  }\n\n  idle(){\n    this.loadingRequestCount--;\n    if (this.loadingRequestCount <= 0){\n      this.loadingRequestCount = 0;\n      this.spinnerService.hide();\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "spinnerService",
                        "type": "NgxSpinnerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "spinnerService",
                        "type": "NgxSpinnerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [
        {
            "name": "ErrorInterceptor",
            "id": "injectable-ErrorInterceptor-5e28d635150844cc41ab9ce71c07f169ca47d88e872d335ea59dc4be13adc8f2e6ea9aa0d44bb78ce68239f979fb031f6d833bc190456454375b83a66bc85526",
            "file": "src/app/modules/core/interceptors/error.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<>>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpErrorResponse\n} from '@angular/common/http';\nimport { Observable, catchError } from 'rxjs';\nimport { ToastrService } from 'ngx-toastr';\n\n@Injectable()\nexport class ErrorInterceptor implements HttpInterceptor {\n\n  constructor(private toastr: ToastrService) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    return next.handle(request).pipe(\n      catchError((error: HttpErrorResponse) => {\n        if (error) {\n          switch (error.status){\n            case 400: \n              if (error.error.errors){\n                const modalStateErrors = [];\n                for (const key in error.error.errors){\n                  if (error.error.errors[key]){\n                    modalStateErrors.push(error.error.errors[key]);\n                  }\n                }\n                this.toastr.error(modalStateErrors.flat().join(','));\n                throw modalStateErrors.flat();\n              } else {\n                this.toastr.error(error.error, error.status.toString());\n              }\n              break;\n            case 401:\n              this.toastr.error('Unauthorized', error.status.toString());\n              break;\n            case 404:\n              this.toastr.error('Not Found', error.status.toString());\n              break;\n            case 500:\n              this.toastr.error('Internal Server Error', error.status.toString());\n              break;\n            default:\n              this.toastr.error('Something unexpected went wrong');\n              console.log(error);\n              break;\n          }\n        }\n        throw error;\n      })\n    )\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "interceptor"
        },
        {
            "name": "LoadingInterceptor",
            "id": "injectable-LoadingInterceptor-0eee09761b391c8d4e6dbdf02b507862e22eeab470c5df8ffb43f78aec718af5affedd0d0c95bf8765372851936c0337e29de9e27e8d6cb79564f1bbfac5d63f",
            "file": "src/app/modules/core/interceptors/loading.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<>>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable, finalize } from 'rxjs';\nimport { LoadingService } from '../services/loading.service';\n\n@Injectable()\nexport class LoadingInterceptor implements HttpInterceptor {\n\n  constructor(private loadingService: LoadingService) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    this.loadingService.loading();\n\n    return next.handle(request).pipe(\n      finalize(() => {\n        this.loadingService.idle();\n      })\n    )\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "loadingService",
                        "type": "LoadingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "loadingService",
                        "type": "LoadingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "interceptor"
        }
    ],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "ActivityComponent",
            "id": "component-ActivityComponent-e5d41516aa6ce75c693cc3efaccfd149e8108194759273323d68e11af0f0227f55e3b5112938b4b45ffdeaa1074a3c556728cab8e236d444fe65ba7de13f05a4",
            "file": "src/app/modules/history/components/activity/activity.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-activity",
            "styleUrls": [
                "./activity.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./activity.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "activityName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "cardName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "date",
                    "defaultValue": "new Date()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "Date",
                    "decorators": []
                },
                {
                    "name": "listName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "previousValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "updatedValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formatDateService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormatDateService",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { FormatDateService } from 'src/app/modules/modals/services/format-date.service';\n\n@Component({\n  selector: 'app-activity',\n  templateUrl: './activity.component.html',\n  styleUrls: ['./activity.component.css']\n})\nexport class ActivityComponent {\n  @Input() cardName: string = '';\n  @Input() activityName: string = '';\n  @Input() previousValue: string = '';\n  @Input() updatedValue: string = '';\n  @Input() date: Date = new Date();\n  @Input() listName?: string = '';\n\n  constructor(public formatDateService: FormatDateService){}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".info {\r\n    color: var(--font-grey);\r\n    font-weight: 400;\r\n    margin-bottom: 0;\r\n}\r\n\r\n.card-name {\r\n    color: var(--black);\r\n    font-weight: 500;\r\n}\r\n\r\n.date {\r\n    font-size: 0.8rem;\r\n    font-weight: 400;\r\n}\r\n\r\n.important {\r\n    font-weight: 500;\r\n}",
                    "styleUrl": "./activity.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formatDateService",
                        "type": "FormatDateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "formatDateService",
                        "type": "FormatDateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<section class=\"activity\" *ngIf=\"activityName === 'added'\">\r\n    <h5 class=\"info\">• You {{activityName}} <span class=\"card-name\">{{cardName}}</span> to <span class=\"important\">{{listName}}</span></h5>\r\n    <i class=\"date\">{{date | date:'MMMM d, y \\'at\\' HH:mm' }}</i>\r\n</section>\r\n\r\n<section class=\"activity\" *ngIf=\"activityName === 'renamed'\">\r\n    <h5 class=\"info\">• You {{activityName}} <span class=\"card-name\">{{previousValue}}</span> to <span class=\"important\">{{updatedValue}}</span></h5>\r\n    <i class=\"date\">{{date | date:'MMMM d, y \\'at\\' HH:mm' }}</i>\r\n</section>\r\n\r\n<section class=\"activity\" *ngIf=\"activityName === 'deleted'\">\r\n    <h5 class=\"info\">• You {{activityName}} <span class=\"card-name\">{{cardName}}</span> from <span class=\"important\">{{listName}}</span></h5>\r\n    <i class=\"date\">{{date | date:'MMMM d, y \\'at\\' HH:mm' }}</i>\r\n</section>\r\n\r\n<section class=\"activity\" *ngIf=\"activityName === 'changed the priority' || activityName === 'changed the date' || activityName === 'changed the description'\">\r\n    <h5 class=\"info\">• You {{activityName}} <span class=\"card-name\">{{cardName}}</span> from <span class=\"important\">{{previousValue}}</span> to <span class=\"important\">{{updatedValue}}</span></h5>\r\n    <i class=\"date\">{{date | date:'MMMM d, y \\'at\\' HH:mm' }}</i>\r\n</section>\r\n\r\n<section class=\"activity\" *ngIf=\"activityName === 'moved'\">\r\n    <h5 class=\"info\">• You {{activityName}} <span class=\"card-name\">{{cardName}}</span> from <span class=\"important\">{{previousValue}}</span> to <span class=\"important\">{{updatedValue}}</span></h5>\r\n    <i class=\"date\">{{date | date:'MMMM d, y \\'at\\' HH:mm' }}</i>\r\n</section>"
        },
        {
            "name": "AddCardComponent",
            "id": "component-AddCardComponent-7f9b873ff3229ee9dc3a6038521b846912b9c0976d0ed37661bee6045b30d609abfb8178f8931518d656312c5564979bf1d133c967974ad1fa6bf13c54f63d27",
            "file": "src/app/modules/modals/components/add-card/add-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-card",
            "styleUrls": [
                "./add-card.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./add-card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "boardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "bsModalRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BsModalRef",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "createCardForm",
                    "defaultValue": "new FormGroup({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "listId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "listName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "listObject",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "lists",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ListsWithIds[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "minDate",
                    "defaultValue": "new Date()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "priorities",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "changeList",
                    "args": [
                        {
                            "name": "list",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "list",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changePriority",
                    "args": [
                        {
                            "name": "priority",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "priority",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createCard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initializeForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { BsModalRef } from 'ngx-bootstrap/modal';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { ListsWithIds } from 'src/app/modules/lists/models/list';\r\nimport { FormatDateService } from '../../services/format-date.service';\r\nimport { Store } from '@ngrx/store';\r\nimport { createCard } from 'src/app/modules/core/store/actions/board.action';\r\n\r\n@Component({\r\n  selector: 'app-add-card',\r\n  templateUrl: './add-card.component.html',\r\n  styleUrls: ['./add-card.component.css']\r\n})\r\nexport class AddCardComponent implements OnInit {\r\n  createCardForm: FormGroup = new FormGroup({});\r\n  lists: ListsWithIds[] = [];\r\n  priorities: string[] = [];\r\n  listId?: number;\r\n  boardId?: number;\r\n  listName?: string;\r\n  minDate: Date = new Date();\r\n  listObject: any = {};\r\n\r\n  constructor(private store: Store, public bsModalRef: BsModalRef, private toastr: ToastrService, private formatDateService: FormatDateService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.listObject = {id: this.listId, name: this.listName};\r\n    this.initializeForm();\r\n  }\r\n\r\n  initializeForm(){\r\n    this.createCardForm = new FormGroup({\r\n      name: new FormControl('', Validators.required),\r\n      listInfo: new FormControl(this.listObject, Validators.required),\r\n      dueDate: new FormControl('', Validators.required),\r\n      priority: new FormControl('', Validators.required),\r\n      description: new FormControl('', Validators.required)\r\n    });\r\n  }\r\n\r\n  createCard() {\r\n    if (this.createCardForm.valid) {\r\n      const card = {\r\n        name: this.createCardForm.value['name'],\r\n        description: this.createCardForm.value['description'],\r\n        dueDate: this.formatDateService.formatDate(this.createCardForm.value['dueDate']),\r\n        priority: this.createCardForm.value['priority'],\r\n        listId: this.createCardForm.value['listInfo'].id, \r\n        boardId: this.boardId\r\n      };\r\n      this.store.dispatch(createCard({card}));\r\n      this.bsModalRef.hide();\r\n    } else {\r\n      this.toastr.error('Please fill all fields');\r\n    } \r\n  }\r\n\r\n  changeList(list: any){\r\n    this.createCardForm.get('listInfo')?.setValue(list);\r\n  }\r\n\r\n  changePriority(priority: string){\r\n    this.createCardForm.get('priority')?.setValue(priority);\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\r\n    padding: 10px;\r\n}\r\n\r\n.section-edit {\r\n    display: flex;\r\n    flex-direction: column;\r\n    row-gap: 7px;\r\n    padding: 5px;\r\n}\r\n\r\n.modal-header {\r\n    background-color: var(--blue);\r\n    padding: 3px;\r\n}\r\n\r\n.footer {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    column-gap: 5px;\r\n    border-top: 1px solid var(--border-grey);\r\n    padding-top: 10px;\r\n}\r\n\r\n.button {\r\n    display: block;\r\n    width: 100%;\r\n    padding: 8px 19px;\r\n    border-radius: 5px;\r\n}\r\n\r\n.save {\r\n    color: var(--white);\r\n    background-color: var(--blue);\r\n}\r\n\r\n.cancel {\r\n    color: var(--black);\r\n    border: 1px solid var(--border-grey);\r\n}\r\n\r\n.close {\r\n    color: var(--white);\r\n}\r\n\r\n.button-disabled {\r\n    background-color: var(--blue-disabled);\r\n    border: 1px solid var(--blue-disabled);\r\n}\r\n\r\n.description {\r\n    width: 100%;\r\n    height: 100px;\r\n    padding: 3px 4px;\r\n    border: 1px solid var(--border-grey);\r\n    border-radius: 5px;\r\n    font-size: 0.95rem;\r\n    color: var(--black);\r\n    background-color: var(--white);\r\n    resize: none;\r\n    outline: none;\r\n}\r\n\r\n.select {\r\n    display: block;\r\n    width: 100%;\r\n    padding: 8px 19px;\r\n    margin-top: 3px;\r\n    border-radius: 5px;\r\n    background-color: var(--grey);\r\n    color: var(--black);\r\n    cursor: pointer;\r\n}\r\n\r\n.dropdown-item {\r\n    cursor: pointer;\r\n}\r\n\r\n.input-name {\r\n    display: block;\r\n    padding: 1px;\r\n    margin-bottom: 5px;\r\n    border: none;\r\n    border-bottom: 1.5px solid var(--border-grey);\r\n    background-color: var(--white);\r\n    font-size: 1.1rem;\r\n    color: var(--black);\r\n    font-weight: 500;\r\n}",
                    "styleUrl": "./add-card.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "bsModalRef",
                        "type": "BsModalRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formatDateService",
                        "type": "FormatDateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bsModalRef",
                        "type": "BsModalRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formatDateService",
                        "type": "FormatDateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"modal-header\">\r\n    <div class=\"container\">\r\n        <button type=\"button\" class=\"btn-close close pull-right\" (click)=\"bsModalRef.hide()\">\r\n            <span class=\"visually-hidden close\">&times;</span>\r\n        </button>\r\n    </div>\r\n</div>\r\n<div class=\"body\">\r\n    <div class=\"container\">\r\n        <form class=\"section-edit\" [formGroup]=\"createCardForm\">\r\n            <input formControlName=\"name\" class=\"input-name\" placeholder=\"Enter name\">\r\n            <div>\r\n                <p>List</p>\r\n                <div class=\"btn-group\" dropdown>\r\n                    <button dropdownToggle class=\"select dropdown-toggle\">\r\n                        {{createCardForm.value['listInfo'] ? (createCardForm.value['listInfo'].name | titlecase) : 'Select list'}}\r\n                    </button>\r\n                    <ul *dropdownMenu class=\"dropdown-menu\">\r\n                        <li role=\"menuitem\" *ngFor=\"let list of lists\">\r\n                            <p class=\"dropdown-item\" (click)=\"changeList(list)\">{{list.name | titlecase}}</p>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <p>Due Date</p>\r\n                <app-date-picker [formControl]=\"$any(createCardForm.controls['dueDate'])\"></app-date-picker>\r\n            </div>\r\n            <div>\r\n                <p>Priority</p>\r\n                <div class=\"btn-group\" dropdown>\r\n                    <button dropdownToggle class=\"select dropdown-toggle\">\r\n                        {{createCardForm.value['priority'] ? createCardForm.value['priority'] : 'Select priority'}} \r\n                    </button>\r\n                    <ul *dropdownMenu class=\"dropdown-menu\">\r\n                        <li role=\"menuitem\" *ngFor=\"let priority of priorities\">\r\n                            <p class=\"dropdown-item\" (click)=\"changePriority(priority)\">{{priority}}</p>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n            <p>Description</p>\r\n            <textarea class=\"description\" formControlName=\"description\"></textarea>\r\n        </form>\r\n    </div>\r\n</div>\r\n<div class=\"container\">\r\n    <div class=\"footer\">\r\n        <button \r\n            class=\"button save\" \r\n            [class.button-disabled]=\"!createCardForm.valid\"\r\n            (click)=\"createCard()\" \r\n            [disabled]=\"!createCardForm.valid\"\r\n        >Create</button>\r\n        <button class=\"button cancel\" (click)=\"bsModalRef.hide()\">Cancel</button>\r\n    </div>\r\n</div>"
        },
        {
            "name": "AddListComponent",
            "id": "component-AddListComponent-8d7fc44e6eb40a78d93a707f2f50ded54cea17208f258512b3f2e0c93faf811a2a0fec105eaf0fc433dd073c5a741af0f08db5fac04ecd427940208904986609",
            "file": "src/app/modules/lists/components/add-list/add-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-list",
            "styleUrls": [
                "./add-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./add-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "boardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "changeEditMode",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "titleInput",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "changeMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "createNewList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { createList } from 'src/app/modules/core/store/actions/board.action';\n\n@Component({\n  selector: 'app-add-list',\n  templateUrl: './add-list.component.html',\n  styleUrls: ['./add-list.component.css']\n})\nexport class AddListComponent {\n  @Output() changeEditMode = new EventEmitter();\n  @Input() boardId?: number;\n  titleInput = '';\n\n  constructor(private store: Store){}\n\n  createNewList() {\n    this.boardId && this.store.dispatch(createList({list: {name: this.titleInput, boardId: this.boardId}}));\n    this.changeMode();\n  }\n\n  changeMode(){\n    this.changeEditMode.emit();\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".input {\r\n    display: block;\r\n    width: 100%;\r\n    border-radius: 5px;\r\n    padding: 4px 3px;\r\n    background-color: var(--priority-grey);\r\n    border: 1px solid var(--border-grey);\r\n}\r\n\r\ninput::placeholder {\r\n    color: var(--black);\r\n}\r\n\r\n.buttons {\r\n    display: flex;\r\n    column-gap: 5px;\r\n}\r\n\r\n.button {\r\n    display: block;\r\n    width: 100%;\r\n    margin: 5px 0;\r\n    padding: 8px 19px;\r\n    border-radius: 5px;\r\n}\r\n\r\n.add {\r\n    background-color: var(--blue);\r\n    color: var(--white);\r\n    border: 1px solid var(--blue);\r\n}\r\n\r\n.cancel {\r\n    background-color: var(--white);\r\n    color: var(--black);\r\n    border: 1px solid var(--border-grey);\r\n}\r\n\r\n.button-disabled {\r\n    background-color: var(--blue-disabled);\r\n    border: 1px solid var(--blue-disabled);\r\n}",
                    "styleUrl": "./add-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"container\">\n    <input \n        class=\"input\" \n        name=\"title\" \n        placeholder=\"Enter list title...\"\n        [(ngModel)]=\"titleInput\"\n    >\n    <div class=\"buttons\">\n        <button \n            class=\"button add\" \n            [class.button-disabled]=\"titleInput.length < 3\"\n            (click)=\"createNewList()\" \n            [disabled]=\"titleInput.length < 3\"\n        >Add list</button>\n        <button class=\"button cancel\" (click)=\"changeMode()\">Cancel</button>\n    </div>\n</div>"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-1333876556940eb411ef5cb60a277b081fa257c0d2305997c38efeb70b3b061f330a92f7176bdc3392e5dae06e334ce9a6efa2d3f09f8b851fb7d398356203eb",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isHistoryVisible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "toggleHistory",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  public isHistoryVisible = false;\n\n  toggleHistory(){\n    this.isHistoryVisible = !this.isHistoryVisible;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import url('https://fonts.googleapis.com/css2?family=Inter:wght@100..900&display=swap');\r\n\r\n* {\r\n    font-family: \"Inter\", sans-serif !important;\r\n    color: var(--black);\r\n}\r\n\r\n.container {\r\n    position: relative;\r\n    margin: 0 auto;\r\n    padding: 10px 25px;\r\n}\r\n\r\n.header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    margin-bottom: 15px;\r\n}\r\n\r\n.title {\r\n    font-size: 21px;\r\n    font-weight: 600;\r\n    margin: 0;\r\n}\r\n\r\n.button {\r\n    padding: 8px 19px;\r\n    border: 1px solid var(--border-grey);\r\n    background-color: var(--white);\r\n    border-radius: 5px;\r\n    font-family: 'Inter', sans-serif;\r\n    cursor: pointer;\r\n}",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<ngx-spinner type=\"timer\"></ngx-spinner>\r\n<router-outlet></router-outlet>"
        },
        {
            "name": "BoardComponent",
            "id": "component-BoardComponent-9f5283ab20839d035e502d890d82744b121279a7c4f6fa08840cf180d60917b86eaf25919e456c58b9619477fca44bbfc5fe33cda4f4c2fea8dee0345753af86",
            "file": "src/app/modules/boards/components/board/board.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-board",
            "styleUrls": [
                "./board.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./board.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "board$",
                    "defaultValue": "this.store.pipe(select(selectSortedBoard))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "boardsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BoardsService",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "bsModalRef",
                    "defaultValue": "new BsModalRef<CreateBoardComponent | EditBoardComponent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BsModalRef<CreateBoardComponent | EditBoardComponent>",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "isHistoryVisible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "createBoardModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deleteBoard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "editBoardModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getBoard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "goBack",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleHistory",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { BoardsService } from '../../services/boards.service';\nimport { ToastrService } from 'ngx-toastr';\nimport { BsModalRef, BsModalService, ModalOptions } from 'ngx-bootstrap/modal';\nimport { CreateBoardComponent } from 'src/app/modules/modals/components/create-board/create-board.component';\nimport { EditBoardComponent } from 'src/app/modules/modals/components/edit-board/edit-board.component';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { take } from 'rxjs';\nimport { Location } from '@angular/common';\nimport { Store, select } from '@ngrx/store';\nimport { deleteBoard, getBoard } from 'src/app/modules/core/store/actions/boards.action';\nimport { selectBoard, selectSortedBoard } from 'src/app/modules/core/store/selectors/board.selector';\n\n@Component({\n  selector: 'app-board',\n  templateUrl: './board.component.html',\n  styleUrls: ['./board.component.css']\n})\nexport class BoardComponent implements OnInit {\n  bsModalRef: BsModalRef<CreateBoardComponent | EditBoardComponent> = new BsModalRef<CreateBoardComponent | EditBoardComponent>();\n  isHistoryVisible = false;\n  \n  constructor(public boardsService: BoardsService, private store: Store, private activatedRoute: ActivatedRoute, private router: Router, \n      private toastr: ToastrService, private modalService: BsModalService, private location: Location){}\n\n  // board$ = this.store.pipe(select(selectBoard));\n  board$ = this.store.pipe(select(selectSortedBoard));\n  \n  ngOnInit(): void {\n    this.getBoard();\n  }\n\n  getBoard(){\n    const id = this.activatedRoute.snapshot.paramMap.get('id');\n    if (id) this.store.dispatch(getBoard({id: +id}));\n  }\n\n  deleteBoard() {\n    const id = this.activatedRoute.snapshot.paramMap.get('id');\n    this.store.dispatch(deleteBoard({id: +id!}));\n    this.router.navigateByUrl('/');\n  }\n\n  createBoardModal(){\n    this.bsModalRef = this.modalService.show(CreateBoardComponent);\n  }\n\n  editBoardModal() {\n    let id: number;\n    let name: string;\n  \n    this.boardsService.board$.pipe(take(1)).subscribe(board => {\n      if (board) {\n        id = board.id;\n        name = board.name;\n  \n        const initialState: ModalOptions = {\n          initialState: {\n            boardId: id,\n            boardName: name\n          }\n        };\n  \n        this.bsModalRef = this.modalService.show(EditBoardComponent, initialState);\n      } else {\n        this.toastr.error('Board not found');\n      }\n    });\n  }\n\n  goBack(): void {\n    this.location.back();\n  }\n\n  toggleHistory(){\n    this.isHistoryVisible = !this.isHistoryVisible;\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\r\n    position: relative;\r\n    margin: 0 auto;\r\n    padding: 10px 25px;\r\n}\r\n\r\n.board-name {\r\n    font-weight: 500;\r\n    font-size: 1.1rem;\r\n    margin-bottom: 0;\r\n}\r\n\r\n.nav {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.controls {\r\n    display: flex;\r\n    align-items: center;\r\n    column-gap: 10px;\r\n}\r\n\r\n.header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    margin-bottom: 15px;\r\n}\r\n\r\n.board-header {\r\n    display: flex;\r\n    align-items: center;\r\n    column-gap: 15px;\r\n}\r\n\r\n.title {\r\n    font-size: 21px;\r\n    font-weight: 600;\r\n    margin: 0;\r\n}\r\n\r\n.select {\r\n    display: block;\r\n    padding: 6px 15px;\r\n    margin-top: 3px;\r\n    border-radius: 5px;\r\n    border: 1px solid var(--border-grey);\r\n    background-color: var(--white);\r\n    color: var(--black);\r\n    font-size: 0.95rem;\r\n    cursor: pointer;\r\n}\r\n\r\n.dropdown-toggle, .dropdown-item {\r\n    width: 100%;\r\n    cursor: pointer;\r\n}\r\n\r\n.button-toggle {\r\n    background-color: rbga(255, 255, 255, 0);\r\n    border: none;\r\n    width: 15px;\r\n    height: 15px;\r\n}\r\n\r\n.delete {\r\n    color: var(--red);\r\n}\r\n\r\n.move {\r\n    width: 100%;\r\n}\r\n\r\n.button {\r\n    padding: 8px 19px;\r\n    border: 1px solid var(--border-grey);\r\n    background-color: var(--white);\r\n    border-radius: 5px;\r\n    font-family: 'Inter', sans-serif;\r\n    cursor: pointer;\r\n}\r\n\r\n.button-back {\r\n    padding: 6px 13px;\r\n    border: 1px solid var(--border-grey);\r\n    background-color: var(--white);\r\n    border-radius: 5px;\r\n    font-family: 'Inter', sans-serif;\r\n    cursor: pointer;\r\n}",
                    "styleUrl": "./board.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "boardsService",
                        "type": "BoardsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modalService",
                        "type": "BsModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "boardsService",
                        "type": "BoardsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "BsModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\" *ngIf=\"(board$ | async) as currentBoard\">\n    <button class=\"button-back\" (click)=\"goBack()\">\n        <i class=\"fa fa-arrow-left\" style=\"font-size: 13px; font-weight: normal;\"></i>\n        Back\n    </button>\n    <nav class=\"nav\">\n        <div class=\"controls\">\n            <h6 class=\"board-name\">{{currentBoard.name}}</h6>\n            <div class=\"dropdown\" dropdown>\n                <button dropdownToggle class=\"button-toggle\">\n                    <i class=\"fa fa-ellipsis-v\"></i>\n                </button>\n                <div class=\"dropdown-menu\" *dropdownMenu>\n                    <p class=\"dropdown-item\" (click)=\"editBoardModal()\">\n                        <i class=\"fa fa-edit\"></i>\n                        Edit board\n                    </p>\n                    <p class=\"dropdown-item delete\" (click)=\"deleteBoard()\">\n                        <i class=\"fa fa-trash\"></i>\n                        Delete board\n                    </p>\n                </div>\n            </div>\n        </div>\n        <button class=\"history\" (click)=\"toggleHistory()\" class=\"button\">History</button>\n    </nav>\n    <app-history *ngIf=\"isHistoryVisible\" (hideHistory)=\"toggleHistory()\" [boardId]=\"currentBoard.id\"></app-history>\n    <app-lists [boardId]=\"currentBoard.id\" [lists]=\"currentBoard.lists\" [listsNames]=\"currentBoard.listNames\"></app-lists>\n</div>"
        },
        {
            "name": "BoardItemComponent",
            "id": "component-BoardItemComponent-0c9784702fbc85900b18cb47c25b767c4ae1e42f4e690d94cbe433b6a791bc87213f656c37c83dc8bffea7a0b2041472bdbfa0de9431a716633c85bb32f5860d",
            "file": "src/app/modules/boards/components/board-item/board-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-board-item",
            "styleUrls": [
                "./board-item.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./board-item.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "name",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bsModalRef",
                    "defaultValue": "new BsModalRef<EditBoardComponent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BsModalRef<EditBoardComponent>",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "unsubscribe$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteBoard",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editBoardModal",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { BsModalRef, BsModalService, ModalOptions } from 'ngx-bootstrap/modal';\nimport { EditBoardComponent } from 'src/app/modules/modals/components/edit-board/edit-board.component';\nimport { Subject, takeUntil } from 'rxjs';\nimport { Store } from '@ngrx/store';\nimport { deleteBoard } from 'src/app/modules/core/store/actions/boards.action';\nimport { selectBoards, selectSortedBoards } from 'src/app/modules/core/store/selectors/boards.selector';\n\n@Component({\n  selector: 'app-board-item',\n  templateUrl: './board-item.component.html',\n  styleUrls: ['./board-item.component.css']\n})\nexport class BoardItemComponent implements OnInit {\n  @Input() name = '';\n  @Input() id?: number;\n  bsModalRef: BsModalRef<EditBoardComponent> = new BsModalRef<EditBoardComponent>();\n  private unsubscribe$: Subject<void> = new Subject<void>();\n\n  constructor(private store: Store, private modalService: BsModalService){}\n\n  ngOnInit(): void {\n    this.store.select(selectSortedBoards)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(success => {\n        if (success) {\n          this.bsModalRef.hide();\n        }\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribe$.next();\n    this.unsubscribe$.complete();\n  }\n\n  deleteBoard(id: number) {\n    this.store.dispatch(deleteBoard({id}));\n  }\n  \n  editBoardModal(id: number, name: string){\n    const initialState: ModalOptions = {\n      initialState: {\n        boardId: id,\n        boardName: name\n      }\n    }\n    this.bsModalRef = this.modalService.show(EditBoardComponent, initialState);\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".board-item {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    height: 250px;\r\n    border: 2px solid var(--border-grey);\r\n    border-radius: 10px;\r\n    transition: border 0.4s;\r\n    cursor: pointer;\r\n}\r\n\r\n.board-item-name {\r\n    width: 100%;\r\n    margin: 0 auto;\r\n    text-align: center;\r\n}\r\n\r\n.board-item-text {\r\n    font-size: 1.12rem;\r\n    font-weight: 400;\r\n}\r\n\r\n.board-item-header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    margin-top: 6px;\r\n    width: 98%;\r\n}\r\n\r\n.button-toggle {\r\n    background-color: rbga(255, 255, 255, 0);\r\n    border: none;\r\n    width: 20px;\r\n    height: 20px;\r\n}\r\n\r\n.board-item:hover {\r\n    border: 2px solid var(--font-grey);\r\n}\r\n\r\n.dropdown-toggle, .dropdown-item {\r\n    width: 100%;\r\n    cursor: pointer;\r\n}\r\n\r\n.delete {\r\n    color: var(--red);\r\n}",
                    "styleUrl": "./board-item.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modalService",
                        "type": "BsModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "BsModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"board-item\" *ngIf=\"id\">\n    <div class=\"board-item-header\">\n        <div></div>\n        <div class=\"dropdown\" dropdown>\n            <button dropdownToggle class=\"button-toggle\">\n                <i class=\"fa fa-ellipsis-v\"></i>\n            </button>\n            <div class=\"dropdown-menu\" *dropdownMenu>\n                <p class=\"dropdown-item\" [routerLink]=\"['/boards', id]\">\n                    <i class=\"fa fa-external-link\"></i>\n                    Open board\n                </p>\n                <p class=\"dropdown-item\" (click)=\"editBoardModal(id, name)\">\n                    <i class=\"fa fa-edit\"></i>\n                    Edit board\n                </p>\n                <p class=\"dropdown-item delete\" (click)=\"deleteBoard(id)\">\n                    <i class=\"fa fa-trash\"></i>\n                    Delete board\n                </p>\n            </div>\n        </div>\n    </div>\n    <div class=\"board-item-name\" [routerLink]=\"['/boards', id]\">\n        <h5 class=\"board-item-text\">{{name}}</h5>\n    </div>\n    <div [routerLink]=\"['/boards', id]\" style=\"margin-top: 5px;\"></div>\n</div>"
        },
        {
            "name": "BoardsComponent",
            "id": "component-BoardsComponent-d7295c7f0edb2878f1ad63d2b8153040513c22a8653acd4735fa8fe1199951198329939be33cbcf5a8f1737679dca10b3c74f3a112504c9a70985bb8849991f3",
            "file": "src/app/modules/boards/components/boards/boards.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-boards",
            "styleUrls": [
                "./boards.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./boards.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "boards$",
                    "defaultValue": "this.store.pipe(select(selectSortedBoards))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "boardsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BoardsService",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "bsModalRef",
                    "defaultValue": "new BsModalRef<CreateBoardComponent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BsModalRef<CreateBoardComponent>",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "createBoardModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deleteBoard",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBoardNames",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { BoardsService } from '../../services/boards.service';\nimport { CreateBoardComponent } from 'src/app/modules/modals/components/create-board/create-board.component';\nimport { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';\nimport { ToastrService } from 'ngx-toastr';\nimport { Store, select } from '@ngrx/store';\nimport { selectBoards, selectSortedBoards } from 'src/app/modules/core/store/selectors/boards.selector';\nimport { deleteBoard, getBoards } from 'src/app/modules/core/store/actions/boards.action';\n\n@Component({\n  selector: 'app-boards',\n  templateUrl: './boards.component.html',\n  styleUrls: ['./boards.component.css']\n})\nexport class BoardsComponent implements OnInit {\n  bsModalRef: BsModalRef<CreateBoardComponent> = new BsModalRef<CreateBoardComponent>();\n  // boards$ = this.store.pipe(select(selectBoards));\n  boards$ = this.store.pipe(select(selectSortedBoards));\n\n  constructor(public boardsService: BoardsService, private toastr: ToastrService, \n    private modalService: BsModalService, private store: Store){}\n\n  ngOnInit(): void {\n    this.store.dispatch(getBoards());\n  }\n\n  getBoardNames(){\n    this.boardsService.getBoards().subscribe({\n      next: boards => {\n        this.boardsService.setBoardNames(boards);\n      }\n    })\n  }\n\n  deleteBoard(id: number){\n    this.store.dispatch(deleteBoard({id}));\n  }\n\n  createBoardModal(){\n    this.bsModalRef = this.modalService.show(CreateBoardComponent);\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".boards-container {\r\n    display: grid;\r\n    grid-template-columns: repeat(3, 1fr);\r\n    gap: 25px;\r\n    margin: 10px auto;\r\n}\r\n\r\n.board-item {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 250px;\r\n    border: 2px solid var(--border-grey);\r\n    border-radius: 10px;\r\n    cursor: pointer;\r\n    transition: all 0.4s;\r\n}\r\n\r\n.board-item:hover {\r\n    border: 2px solid var(--font-grey);\r\n}\r\n\r\n.board-text {\r\n    text-align: center;\r\n    font-size: 1.12rem;\r\n    font-weight: 400;\r\n}",
                    "styleUrl": "./boards.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "boardsService",
                        "type": "BoardsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modalService",
                        "type": "BsModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "boardsService",
                        "type": "BoardsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "BsModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"boards-container\" *ngIf=\"(boards$ | async) as boards\">\n    <app-board-item\n        *ngFor=\"let board of boards.boards\"\n        [name]=\"board.name\"\n        [id]=\"board.id\"\n    ></app-board-item>\n    <div class=\"board-item\" (click)=\"createBoardModal()\">\n        <h5 class=\"board-text\">Create board</h5>\n    </div>\n</div>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-86e2311c54fbca7431c12e070d0fd5b0ebe343eec0553a392f182ba0e04a8f86613233d26ee47718fd0e7a65078f580c76a1fcc928ce55de81193d6618025bc4",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 798,
                            "end": 811,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 799,
                                "end": 807,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 35,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 49,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 51
                    }
                }
            }
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-512738005b58be33329a4228724ac779228cda376ba52cf5f5cfbdf1550a182b47e2fec400735a6713ac1db72bd141fb6a2476ac3ca628705faf100eb58e7c71-1",
            "file": "src/app/modules/shared/components/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [
                "./button.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "buttonType",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "\"primary\" | \"secondary\"",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.css']\n})\nexport class ButtonComponent {\n  @Input() label: string = '';\n  @Input() primary: boolean = true;\n  @Input() buttonType: 'primary' | 'secondary' = 'primary';\n  @Input() disabled: boolean = false;\n\n  public get buttonClass(): string[] {\n    const mode = this.primary ? 'button--primary' : 'button--secondary';\n    return ['button', `button--${this.buttonType}`, mode]\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".button {\r\n    padding: 8px 19px;\r\n    border-radius: 5px;\r\n    font-family: 'Inter', sans-serif;\r\n    cursor: pointer;\r\n}\r\n\r\n.button--primary {\r\n    border: 1px solid var(--border-grey);\r\n    background-color: var(--white);\r\n}\r\n\r\n.button--secondary {\r\n    color: var(--white);\r\n    border: 1px solid var(--blue);\r\n    background-color: var(--blue);\r\n}\r\n\r\n.button--disabled {\r\n    cursor: not-allowed;\r\n}",
                    "styleUrl": "./button.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "buttonClass": {
                    "name": "buttonClass",
                    "getSignature": {
                        "name": "buttonClass",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 14
                    }
                }
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ButtonComponent-1",
            "templateData": "<button class=\"button\" [ngClass]=\"buttonClass\" [disabled]=\"disabled\">{{label}}</button>"
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-821157ea9b58ececc714e870e94ada92a6133fa8b43e04f1a9394ce4ffca9407f2de1e409ebd35ca12eaa5a83cf381fa11423bc98aab0334b51c2d4d61a89013",
            "file": "src/app/modules/cards/components/card/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card",
            "styleUrls": [
                "./card.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "boardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "dueDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "list",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "listId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "lists",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "ListsWithIds[]",
                    "decorators": []
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "priority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "rightContextMenu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bsModalRef",
                    "defaultValue": "new BsModalRef<EditCardComponent | OpenCardComponent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BsModalRef<EditCardComponent | OpenCardComponent>",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "priorities",
                    "defaultValue": "['Low', 'Medium', 'High']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteCard",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moveTo",
                    "args": [
                        {
                            "name": "move",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "move",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openCardModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openEditModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { BsModalRef, BsModalService, ModalOptions } from 'ngx-bootstrap/modal';\r\nimport { EditCardComponent } from 'src/app/modules/modals/components/edit-card/edit-card.component';\r\nimport { OpenCardComponent } from 'src/app/modules/modals/components/open-card/open-card.component';\r\nimport { ListsWithIds } from 'src/app/modules/lists/models/list';\r\nimport { deleteCard, editCard } from 'src/app/modules/core/store/actions/board.action';\r\nimport { Store } from '@ngrx/store';\r\n\r\n@Component({\r\n  selector: 'app-card',\r\n  templateUrl: './card.component.html',\r\n  styleUrls: ['./card.component.css']\r\n})\r\nexport class CardComponent {\r\n  @Input() id?: number; // card id\r\n  @Input() name?: string;\r\n  @Input() description?: string;\r\n  @Input() dueDate?: string;\r\n  @Input() priority?: string;\r\n  @Input() list?: string; // list name\r\n  @Input() listId?: number; // list id\r\n  @Input() boardId?: number;\r\n  @Input() lists: ListsWithIds[] = [];\r\n  @Input() rightContextMenu?: boolean;\r\n  priorities = ['Low', 'Medium', 'High'];\r\n  bsModalRef: BsModalRef<EditCardComponent | OpenCardComponent> = new BsModalRef<EditCardComponent | OpenCardComponent>();\r\n\r\n  constructor(private store: Store, private modalService: BsModalService, ){}\r\n\r\n  moveTo(move: number) {\r\n    this.store.dispatch(editCard({\r\n      payload: {\r\n        id: this.id!, \r\n        listId: move, \r\n        boardId: this.boardId,\r\n        name: this.name,\r\n        description: this.description,\r\n        priority: this.priority,\r\n        dueDate: this.dueDate\r\n      }\r\n    }));\r\n  }\r\n\r\n  deleteCard(id: number) {\r\n    this.store.dispatch(deleteCard({id}));\r\n  } \r\n  \r\n  openEditModal(){\r\n    const initialState: ModalOptions = {\r\n      initialState: {\r\n        cardId: this.id,\r\n        cardName: this.name,\r\n        description: this.description,\r\n        dueDate: this.dueDate,\r\n        priority: this.priority,\r\n        listName: this.list,\r\n        listId: this.listId,\r\n        boardId: this.boardId,\r\n        lists: this.lists,\r\n        priorities: this.priorities\r\n      }\r\n    }\r\n    this.bsModalRef = this.modalService.show(EditCardComponent, initialState);\r\n  }\r\n\r\n  openCardModal(){\r\n    const initialState: ModalOptions = {\r\n      initialState: {\r\n        id: this.id,\r\n        name: this.name,\r\n        description: this.description,\r\n        dueDate: this.dueDate,\r\n        priority: this.priority,\r\n        list: this.list,\r\n        listId: this.listId,\r\n        boardId: this.boardId,\r\n        lists: this.lists,\r\n        priorities: this.priorities\r\n      },\r\n      class: 'modal-lg'\r\n    }\r\n    this.bsModalRef = this.modalService.show(OpenCardComponent, initialState);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    row-gap: 7.5px;\r\n    padding: 17px 15px;\r\n    margin: 15px 0;\r\n    border: 1.5px solid var(--border-grey);\r\n    border-radius: 15px;\r\n}\r\n\r\n.header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    height: 23px;\r\n}\r\n\r\n.name {\r\n    font-size: 1rem;\r\n    color: var(--black);\r\n    font-weight: 600;\r\n    margin-bottom: 0;\r\n    cursor: pointer;\r\n}\r\n\r\n.button-toggle {\r\n    background-color: rbga(255, 255, 255, 0);\r\n    border: none;\r\n    width: 15px;\r\n    height: 15px;\r\n}\r\n\r\n.description {\r\n    color: var(--font-grey);\r\n    font-size: 0.8rem;\r\n}\r\n\r\n.date {\r\n    font-size: 0.8rem;\r\n    font-weight: 500;\r\n    color: var(--black);\r\n}\r\n\r\n.priority {\r\n    width: fit-content;\r\n    padding: 5px 10px;\r\n    border-radius: 30px;\r\n    background-color: var(--priority-grey);\r\n    color: var(--font-grey);\r\n    font-size: 0.85rem;\r\n    font-weight: 500;\r\n}\r\n\r\n.select {\r\n    display: block;\r\n    width: 100%;\r\n    padding: 4px 11px;\r\n    margin-top: 3px;\r\n    border-radius: 5px;\r\n    background-color: var(--grey);\r\n    color: var(--black);\r\n    font-size: 0.95rem;\r\n    cursor: pointer;\r\n}\r\n\r\n.dropdown-toggle, .dropdown-item {\r\n    cursor: pointer;\r\n}\r\n\r\n.delete {\r\n    color: var(--red);\r\n}\r\n\r\n.move {\r\n    width: 100%;\r\n}",
                    "styleUrl": "./card.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modalService",
                        "type": "BsModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "BsModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"container\">\r\n    <header class=\"header\">\r\n        <h5 class=\"name\" (click)=\"openCardModal()\">{{name}}</h5>\r\n        <div class=\"dropdown\" dropdown>\r\n            <button dropdownToggle class=\"button-toggle\">\r\n                <i class=\"fa fa-ellipsis-v\"></i>\r\n            </button>\r\n            <div class=\"dropdown-menu\" *dropdownMenu [class.dropdown-menu-right]=\"rightContextMenu\">\r\n                <p class=\"dropdown-item\" (click)=\"openEditModal()\">\r\n                    <i class=\"fa fa-edit\"></i>\r\n                    Edit\r\n                </p>\r\n                <p class=\"dropdown-item delete\" (click)=\"deleteCard(id!)\">\r\n                    <i class=\"fa fa-trash\"></i>\r\n                    Delete\r\n                </p>\r\n            </div>\r\n        </div>\r\n    </header>\r\n    <p class=\"description\">{{description}}</p>\r\n    <p class=\"date\">\r\n        <i class=\"fa fa-calendar-o\"></i>\r\n        {{dueDate | date}}\r\n    </p>\r\n    <span class=\"priority\">• {{priority}}</span>\r\n    <div class=\"dropdown\" dropdown>\r\n        <button class=\"select\" dropdownToggle>\r\n            Move To\r\n            <i class=\"fa fa-caret-down\"></i>\r\n        </button>\r\n        <div class=\"dropdown-menu move\" *dropdownMenu>\r\n            <p class=\"dropdown-item\" *ngFor=\"let list of lists\" (click)=\"moveTo(list.id)\">{{list.name}}</p>\r\n        </div>\r\n    </div>\r\n</div>"
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-1c89b24cc7455819fcbccf351554412bc81697fd2790dc6972c2ba4688e5aa09a4a3390fdafeea7683b10b0b1163abc62a4fb4094fdbc3cb05370e57b5abcf66-1",
            "file": "src/app/modules/shared/components/card/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card",
            "styleUrls": [
                "./card.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "boardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "dueDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "list",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "listId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "lists",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "ListsWithIds[]",
                    "decorators": []
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "priority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "rightContextMenu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "priorities",
                    "defaultValue": "['Low', 'Medium', 'High']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteCard",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moveTo",
                    "args": [
                        {
                            "name": "move",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "move",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openCardModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openEditModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { ModalOptions } from 'ngx-bootstrap/modal';\nimport { ListsWithIds } from 'src/app/modules/lists/models/list';\nimport { deleteCard, editCard } from 'src/app/modules/core/store/actions/board.action';\nimport { Store } from '@ngrx/store';\n\n@Component({\n  selector: 'app-card',\n  templateUrl: './card.component.html',\n  styleUrls: ['./card.component.css']\n})\nexport class CardComponent {\n  @Input() id?: number;\n  @Input() name?: string;\n  @Input() description?: string;\n  @Input() dueDate?: string;\n  @Input() priority?: string;\n  @Input() list?: string; \n  @Input() listId?: number;\n  @Input() boardId?: number;\n  @Input() lists: ListsWithIds[] = [];\n  @Input() rightContextMenu?: boolean;\n  priorities = ['Low', 'Medium', 'High'];\n\n  constructor(private store: Store){}\n\n  moveTo(move: number) {\n    this.store.dispatch(editCard({\n      payload: {\n        id: this.id!, \n        listId: move, \n        boardId: this.boardId,\n        name: this.name,\n        description: this.description,\n        priority: this.priority,\n        dueDate: this.dueDate\n      }\n    }));\n  }\n\n  deleteCard(id: number) {\n    this.store.dispatch(deleteCard({id}));\n  } \n  \n  openEditModal(){\n    const initialState: ModalOptions = {\n      initialState: {\n        cardId: this.id,\n        cardName: this.name,\n        description: this.description,\n        dueDate: this.dueDate,\n        priority: this.priority,\n        listName: this.list,\n        listId: this.listId,\n        boardId: this.boardId,\n        lists: this.lists,\n        priorities: this.priorities\n      }\n    }\n  }\n\n  openCardModal(){\n    const initialState: ModalOptions = {\n      initialState: {\n        id: this.id,\n        name: this.name,\n        description: this.description,\n        dueDate: this.dueDate,\n        priority: this.priority,\n        list: this.list,\n        listId: this.listId,\n        boardId: this.boardId,\n        lists: this.lists,\n        priorities: this.priorities\n      },\n      class: 'modal-lg'\n    }\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    row-gap: 7.5px;\r\n    width: 350px;\r\n    padding: 17px 15px;\r\n    margin: 15px 0;\r\n    border: 1.5px solid var(--border-grey);\r\n    border-radius: 15px;\r\n}\r\n\r\n.header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    height: 23px;\r\n}\r\n\r\n.name {\r\n    font-size: 1rem;\r\n    color: var(--black);\r\n    font-weight: 600;\r\n    margin-bottom: 0;\r\n    cursor: pointer;\r\n}\r\n\r\n.button-toggle {\r\n    background-color: rbga(255, 255, 255, 0);\r\n    border: none;\r\n    width: 15px;\r\n    height: 15px;\r\n}\r\n\r\n.description {\r\n    color: var(--font-grey);\r\n    font-size: 0.8rem;\r\n}\r\n\r\n.date {\r\n    font-size: 0.8rem;\r\n    font-weight: 500;\r\n    color: var(--black);\r\n}\r\n\r\n.priority {\r\n    width: fit-content;\r\n    padding: 5px 10px;\r\n    border-radius: 30px;\r\n    background-color: var(--priority-grey);\r\n    color: var(--font-grey);\r\n    font-size: 0.85rem;\r\n    font-weight: 500;\r\n}\r\n\r\n.select {\r\n    display: block;\r\n    width: 100%;\r\n    padding: 4px 11px;\r\n    margin-top: 3px;\r\n    border-radius: 5px;\r\n    background-color: var(--grey);\r\n    color: var(--black);\r\n    font-size: 0.95rem;\r\n    cursor: pointer;\r\n}\r\n\r\n.dropdown-toggle, .dropdown-item {\r\n    cursor: pointer;\r\n}\r\n\r\n.delete {\r\n    color: var(--red);\r\n}\r\n\r\n.move {\r\n    width: 100%;\r\n}",
                    "styleUrl": "./card.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "CardComponent-1",
            "templateData": "<div class=\"container\">\n    <header class=\"header\">\n        <h5 class=\"name\">{{name}}</h5>\n        <div class=\"dropdown\" dropdown>\n            <button dropdownToggle class=\"button-toggle\">\n                <i class=\"fa fa-ellipsis-v\"></i>\n            </button>\n            <div class=\"dropdown-menu\" *dropdownMenu [class.dropdown-menu-right]=\"rightContextMenu\">\n                <p class=\"dropdown-item\">\n                    <i class=\"fa fa-edit\"></i>\n                    Edit\n                </p>\n                <p class=\"dropdown-item delete\">\n                    <i class=\"fa fa-trash\"></i>\n                    Delete\n                </p>\n            </div>\n        </div>\n    </header>\n    <p class=\"description\">{{description}}</p>\n    <p class=\"date\">\n        <i class=\"fa fa-calendar-o\"></i>\n        {{dueDate | date}}\n    </p>\n    <span class=\"priority\">• {{priority}}</span>\n    <div class=\"dropdown\" dropdown>\n        <button class=\"select\" dropdownToggle>\n            Move To\n            <i class=\"fa fa-caret-down\"></i>\n        </button>\n        <div class=\"dropdown-menu move\" *dropdownMenu>\n            <p class=\"dropdown-item\" *ngFor=\"let list of lists\" (click)=\"moveTo(list.id)\">{{list.name}}</p>\n        </div>\n    </div>\n</div>"
        },
        {
            "name": "CreateBoardComponent",
            "id": "component-CreateBoardComponent-0493c036c977bff252936af8d893b3032277fc087dbafa95f60361ddfb1242e1a067a07ee29cf60f51c91b5bb1a13a865ae8e545143e53ddacaceee7f621e75d",
            "file": "src/app/modules/modals/components/create-board/create-board.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-create-board",
            "styleUrls": [
                "./create-board.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./create-board.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bsModalRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BsModalRef",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "createBoardForm",
                    "defaultValue": "new FormGroup({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "createBoard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initializeForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Store } from '@ngrx/store';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { ToastrService } from 'ngx-toastr';\nimport { Subject, takeUntil } from 'rxjs';\nimport { createBoard } from 'src/app/modules/core/store/actions/boards.action';\nimport { selectBoards } from 'src/app/modules/core/store/selectors/boards.selector';\n\n@Component({\n  selector: 'app-create-board',\n  templateUrl: './create-board.component.html',\n  styleUrls: ['./create-board.component.css']\n})\nexport class CreateBoardComponent implements OnInit {\n  createBoardForm: FormGroup = new FormGroup({});\n\n  constructor(private fb: FormBuilder, private store: Store, private toastr: ToastrService, public bsModalRef: BsModalRef){}\n\n  ngOnInit(): void {\n    this.initializeForm();\n  }\n\n  initializeForm(){\n    this.createBoardForm = this.fb.group({\n      name: ['', Validators.required],\n    });\n  }\n\n  createBoard(){\n    this.store.dispatch(createBoard({board: {name: this.createBoardForm.value['name']}}));\n    this.bsModalRef.hide();\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\r\n    padding: 10px;\r\n}\r\n\r\n.section-edit {\r\n    display: flex;\r\n    flex-direction: column;\r\n    row-gap: 7px;\r\n    padding: 5px;\r\n}\r\n\r\n.body-text {\r\n    text-align: center;\r\n    font-size: 1.1rem;\r\n    font-weight: 500;\r\n    margin: 7px 0 15px;\r\n}\r\n\r\n.input {\r\n    display: block;\r\n    width: 100%;\r\n    padding: 4px 3.5px;\r\n    border: 1px solid var(--border-grey);\r\n    border-radius: 5px;\r\n    color: var(--black);\r\n    font-weight: 500;\r\n    font-family: 'Inter', sans-serif;\r\n}\r\n\r\n.modal-header {\r\n    background-color: var(--blue);\r\n    padding: 3px;\r\n}\r\n\r\n.footer {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    column-gap: 5px;\r\n    border-top: 1px solid var(--border-grey);\r\n    padding-top: 10px;\r\n}\r\n\r\n.button {\r\n    display: block;\r\n    width: 100%;\r\n    padding: 8px 19px;\r\n    border-radius: 5px;\r\n}\r\n\r\n.save {\r\n    color: var(--white);\r\n    background-color: var(--blue);\r\n}\r\n\r\n.cancel {\r\n    color: var(--black);\r\n    border: 1px solid var(--border-grey);\r\n}\r\n\r\n.button-disabled {\r\n    background-color: var(--blue-disabled);\r\n    border: 1px solid var(--blue-disabled);\r\n}\r\n\r\n.close {\r\n    color: var(--white);\r\n}",
                    "styleUrl": "./create-board.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "bsModalRef",
                        "type": "BsModalRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bsModalRef",
                        "type": "BsModalRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"modal-header\">\n    <div class=\"container\">\n        <button type=\"button\" class=\"btn-close close pull-right\" (click)=\"bsModalRef.hide()\">\n            <span class=\"visually-hidden close\">&times;</span>\n        </button>\n    </div>\n</div>\n<div class=\"body\">\n    <div class=\"container\">\n        <h5 class=\"body-text\">Enter name for new board</h5>\n        <form [formGroup]=\"createBoardForm\" class=\"section-edit\">\n            <input formControlName=\"name\" class=\"input\" placeholder=\"Enter name...\">\n        </form>\n    </div>\n</div>\n<div class=\"container\">\n    <div class=\"footer\">\n        <button \n            class=\"button save\" \n            (click)=\"createBoard()\" \n        >Create</button>\n        <button class=\"button cancel\" (click)=\"bsModalRef.hide()\">Cancel</button>\n    </div>\n</div>"
        },
        {
            "name": "DatePickerComponent",
            "id": "component-DatePickerComponent-972bec44456dbe2f7b4f408a3abaca3ef4e9daf0929f9c954617d23dd389e8f5673412cb485750b6af84b43e41fade1f58b125d7ae75fba09facc7f1a9ab9984",
            "file": "src/app/modules/shared/components/date-picker/date-picker.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-date-picker",
            "styleUrls": [
                "./date-picker.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./date-picker.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bsConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Partial<BsDatepickerConfig> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "ngControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgControl",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "Self",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Self } from '@angular/core';\nimport { ControlValueAccessor, FormControl, NgControl } from '@angular/forms';\nimport { BsDatepickerConfig } from 'ngx-bootstrap/datepicker';\n\n@Component({\n  selector: 'app-date-picker',\n  templateUrl: './date-picker.component.html',\n  styleUrls: ['./date-picker.component.css']\n})\nexport class DatePickerComponent implements ControlValueAccessor {\n  bsConfig: Partial<BsDatepickerConfig> | undefined;\n\n  constructor(@Self() public ngControl: NgControl) { \n    this.ngControl.valueAccessor = this;\n    this.bsConfig = {\n      containerClass: 'theme-dark-blue',\n      dateInputFormat: 'DD MMMM YYYY'\n    }\n  }\n\n  writeValue(obj: any): void {}\n\n  registerOnChange(fn: any): void {}\n\n  registerOnTouched(fn: any): void {}\n\n  get control(): FormControl {\n    return this.ngControl.control as FormControl;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".select {\r\n    display: inline-block;\r\n    width: 30%;\r\n    padding: 8px 19px;\r\n    margin-top: 3px;\r\n    border-radius: 5px;\r\n    background-color: var(--grey);\r\n    color: var(--black);\r\n    cursor: pointer;\r\n}\r\n\r\ninput::placeholder {\r\n    color: var(--black);\r\n}\r\n\r\n.date-picker-container {\r\n    position: relative;\r\n}\r\n\r\n.select-arrow {\r\n    position: absolute;\r\n    left: 24%;\r\n    top: 26%;\r\n}\r\n\r\n.select-arrow::after {\r\n    display: inline-block;\r\n    margin-left: .255em;\r\n    vertical-align: .255em;\r\n    content: \"\";\r\n    border-top: .3em solid;\r\n    border-right: .3em solid transparent;\r\n    border-bottom: 0;\r\n    border-left: .3em solid transparent;\r\n}",
                    "styleUrl": "./date-picker.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ngControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "ngControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "control": {
                    "name": "control",
                    "getSignature": {
                        "name": "control",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 27
                    }
                }
            },
            "templateData": "<div class=\"date-picker-container\">\r\n    <input\r\n        type=\"text\" \r\n        [class.is-invalid]=\"control.touched && control.invalid\"\r\n        class=\"select\"\r\n        [formControl]=\"control\"\r\n        [placeholder]=\"'Select dates'\"\r\n        bsDatepicker\r\n        [bsConfig]=\"bsConfig\"\r\n    >\r\n    <span class=\"select-arrow\"></span>\r\n</div>"
        },
        {
            "name": "EditBoardComponent",
            "id": "component-EditBoardComponent-7a42dd7b928e6052774bbf627e5df58e4d2d270fbb2910e38db6c83e920defac1f943cab4c3554ff6ea6112bc90a9981f52d1667105926d5500d3d71545d7bc0",
            "file": "src/app/modules/modals/components/edit-board/edit-board.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-edit-board",
            "styleUrls": [
                "./edit-board.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./edit-board.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "boardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "boardName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "bsModalRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BsModalRef",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "editBoardForm",
                    "defaultValue": "new FormGroup({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "editBoard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initializeForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Store } from '@ngrx/store';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { editBoard } from 'src/app/modules/core/store/actions/boards.action';\n\n@Component({\n  selector: 'app-edit-board',\n  templateUrl: './edit-board.component.html',\n  styleUrls: ['./edit-board.component.css']\n})\nexport class EditBoardComponent implements OnInit {\n  boardId?: number;\n  boardName?: string;\n  editBoardForm: FormGroup = new FormGroup({});\n\n  constructor(private fb: FormBuilder, private store: Store, public bsModalRef: BsModalRef){}\n\n  ngOnInit(): void {\n    this.initializeForm();\n  }\n\n  initializeForm(){\n    this.editBoardForm = this.fb.group({\n      name: [this.boardName, Validators.required],\n    });\n  }\n\n  editBoard() {\n    if (this.boardName && this.boardId) {\n      this.store.dispatch(editBoard({payload: {id: this.boardId, name: this.editBoardForm.value['name']}}));\n      this.bsModalRef.hide();\n    } \n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\r\n    padding: 10px;\r\n}\r\n\r\n.section-edit {\r\n    display: flex;\r\n    flex-direction: column;\r\n    row-gap: 7px;\r\n    padding: 5px;\r\n}\r\n\r\n.body-text {\r\n    text-align: center;\r\n    font-size: 1.1rem;\r\n    font-weight: 500;\r\n    margin: 7px 0 15px;\r\n}\r\n\r\n.input {\r\n    display: block;\r\n    width: 100%;\r\n    padding: 4px 3.5px;\r\n    border: 1px solid var(--border-grey);\r\n    border-radius: 5px;\r\n    color: var(--black);\r\n    font-weight: 500;\r\n    font-family: 'Inter', sans-serif;\r\n}\r\n\r\n.modal-header {\r\n    background-color: var(--blue);\r\n    padding: 3px;\r\n}\r\n\r\n.footer {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    column-gap: 5px;\r\n    border-top: 1px solid var(--border-grey);\r\n    padding-top: 10px;\r\n}\r\n\r\n.button {\r\n    display: block;\r\n    width: 100%;\r\n    padding: 8px 19px;\r\n    border-radius: 5px;\r\n}\r\n\r\n.save {\r\n    color: var(--white);\r\n    background-color: var(--blue);\r\n}\r\n\r\n.cancel {\r\n    color: var(--black);\r\n    border: 1px solid var(--border-grey);\r\n}\r\n\r\n.button-disabled {\r\n    background-color: var(--blue-disabled);\r\n    border: 1px solid var(--blue-disabled);\r\n}\r\n\r\n.close {\r\n    color: var(--white);\r\n}",
                    "styleUrl": "./edit-board.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "bsModalRef",
                        "type": "BsModalRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bsModalRef",
                        "type": "BsModalRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"modal-header\">\n    <div class=\"container\">\n        <button type=\"button\" class=\"btn-close close pull-right\" (click)=\"bsModalRef.hide()\">\n            <span class=\"visually-hidden close\">&times;</span>\n        </button>\n    </div>\n</div>\n<div class=\"body\">\n    <div class=\"container\">\n        <h5 class=\"body-text\">Enter new name for board</h5>\n        <form [formGroup]=\"editBoardForm\" class=\"section-edit\">\n            <input formControlName=\"name\" class=\"input\">\n        </form>\n    </div>\n</div>\n<div class=\"container\">\n    <div class=\"footer\">\n        <button \n            class=\"button save\" \n            (click)=\"editBoard()\" \n        >Save</button>\n        <button class=\"button cancel\" (click)=\"bsModalRef.hide()\">Cancel</button>\n    </div>\n</div>"
        },
        {
            "name": "EditCardComponent",
            "id": "component-EditCardComponent-b94da1399f4b94849dc62888f88198e1d40d6dc4dad48314a047c7a5ef9dd331f97df8840d3a3c2c3d2e3d6a700888c86228bbf4e6a48724a6e499a8af499e70",
            "file": "src/app/modules/modals/components/edit-card/edit-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-edit-card",
            "styleUrls": [
                "./edit-card.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./edit-card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "boardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "bsModalRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BsModalRef",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "cardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "cardName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "dueDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "editCardForm",
                    "defaultValue": "new FormGroup({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "listId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "listName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "listObject",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "List",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "lists",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ListsWithIds[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "listsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ListsService",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "minDate",
                    "defaultValue": "new Date()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "priorities",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "priority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "changeList",
                    "args": [
                        {
                            "name": "list",
                            "type": "List",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "list",
                            "type": "List",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changePriority",
                    "args": [
                        {
                            "name": "priority",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "priority",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initializeForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ListsWithIds } from 'src/app/modules/lists/models/list';\nimport { List } from '../../models/list';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CardsService } from 'src/app/modules/cards/services/cards.service';\nimport { ToastrService } from 'ngx-toastr';\nimport { FormatDateService } from '../../services/format-date.service';\nimport { catchError, of, switchMap } from 'rxjs';\nimport { BoardsService } from 'src/app/modules/boards/services/boards.service';\nimport { ListsService } from 'src/app/modules/lists/services/lists.service';\nimport { Store } from '@ngrx/store';\nimport { editCard } from 'src/app/modules/core/store/actions/board.action';\n\n@Component({\n  selector: 'app-edit-card',\n  templateUrl: './edit-card.component.html',\n  styleUrls: ['./edit-card.component.css']\n})\nexport class EditCardComponent implements OnInit {\n  cardId?: number; // card id\n  cardName?: string; // card name\n  description?: string; // card description\n  dueDate?: string; // card date\n  priority?: string; // card priority\n  listName?: string; // list name\n  listId?: number; // list id\n  boardId?: number;\n  lists: ListsWithIds[] = []; // all current lists\n  priorities: string[] = []; // all priorities\n  editCardForm: FormGroup = new FormGroup({});\n  minDate: Date = new Date();\n  listObject: List = {};\n  \n  constructor(private fb: FormBuilder, private store: Store, public bsModalRef: BsModalRef, \n    private toastr: ToastrService, private formatDateService: FormatDateService, public listsService: ListsService){}\n\n  ngOnInit(): void {\n    this.listObject = {name: this.listName, id: this.listId};\n    this.initializeForm();\n  }\n\n  initializeForm(){\n    this.editCardForm = this.fb.group({\n      name: [this.cardName, Validators.required],\n      listInfo: [this.listObject, Validators.required],\n      dueDate: [new Date(this.dueDate as string), Validators.required],\n      priority: [this.priority, Validators.required],\n      description: [this.description, Validators.required]\n    });\n  }\n\n  saveChanges() {\n    if (this.editCardForm.valid && this.cardId) {\n      const cardData = {\n        name: this.editCardForm.value['name'],\n        description: this.editCardForm.value['description'],\n        dueDate: this.formatDateService.formatDate(this.editCardForm.value['dueDate']),\n        priority: this.editCardForm.value['priority'],\n        listId: this.editCardForm.value['listInfo'].id,\n        boardId: this.boardId\n      };\n      this.store.dispatch(editCard({payload: {id: this.cardId, ...cardData}}));\n      this.bsModalRef.hide();\n    } else {\n      this.toastr.error('Please fill all fields');\n    }\n  }\n\n  changeList(list: List){\n    this.editCardForm.get('listInfo')?.setValue(list);\n  }\n\n  changePriority(priority: string){\n    this.editCardForm.get('priority')?.setValue(priority);\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\r\n    padding: 10px;\r\n}\r\n\r\n.section-edit {\r\n    display: flex;\r\n    flex-direction: column;\r\n    row-gap: 7px;\r\n    padding: 5px;\r\n}\r\n\r\n.modal-header {\r\n    background-color: var(--blue);\r\n    padding: 3px;\r\n}\r\n\r\n.footer {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    column-gap: 5px;\r\n    border-top: 1px solid var(--border-grey);\r\n    padding-top: 10px;\r\n}\r\n\r\n.button {\r\n    display: block;\r\n    width: 100%;\r\n    padding: 8px 19px;\r\n    border-radius: 5px;\r\n}\r\n\r\n.save {\r\n    color: var(--white);\r\n    background-color: var(--blue);\r\n}\r\n\r\n.cancel {\r\n    color: var(--black);\r\n    border: 1px solid var(--border-grey);\r\n}\r\n\r\n.button-disabled {\r\n    background-color: var(--blue-disabled);\r\n    border: 1px solid var(--blue-disabled);\r\n}\r\n\r\n.close {\r\n    color: var(--white);\r\n}\r\n\r\n.description {\r\n    width: 100%;\r\n    height: 100px;\r\n    padding: 3px 4px;\r\n    border: 1px solid var(--border-grey);\r\n    border-radius: 5px;\r\n    font-size: 0.95rem;\r\n    color: var(--black);\r\n    background-color: var(--white);\r\n    resize: none;\r\n    outline: none;\r\n}\r\n\r\n.select {\r\n    display: block;\r\n    width: 100%;\r\n    padding: 8px 19px;\r\n    margin-top: 3px;\r\n    border-radius: 5px;\r\n    background-color: var(--grey);\r\n    color: var(--black);\r\n    cursor: pointer;\r\n}\r\n\r\n.dropdown-item {\r\n    cursor: pointer;\r\n}\r\n\r\n.input-name {\r\n    display: block;\r\n    padding: 1px;\r\n    margin-bottom: 5px;\r\n    font-size: 1.1rem;\r\n    border: none;\r\n    border-bottom: 1.5px solid var(--border-grey);\r\n    background-color: var(--white);\r\n    color: var(--black);\r\n    font-weight: 500;\r\n}",
                    "styleUrl": "./edit-card.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "bsModalRef",
                        "type": "BsModalRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formatDateService",
                        "type": "FormatDateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "listsService",
                        "type": "ListsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bsModalRef",
                        "type": "BsModalRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formatDateService",
                        "type": "FormatDateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "listsService",
                        "type": "ListsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"modal-header\">\r\n    <div class=\"container\">\r\n        <button type=\"button\" class=\"btn-close close pull-right\" (click)=\"bsModalRef.hide()\">\r\n            <span class=\"visually-hidden close\">&times;</span>\r\n        </button>\r\n    </div>\r\n</div>\r\n<div class=\"body\">\r\n    <div class=\"container\">\r\n        <form [formGroup]=\"editCardForm\" class=\"section-edit\">\r\n            <input formControlName=\"name\" class=\"input-name\">\r\n            <div>\r\n                <p>List</p>\r\n                <div class=\"btn-group\" dropdown>\r\n                    <button dropdownToggle class=\"select dropdown-toggle\">\r\n                        {{editCardForm.value['listInfo'].name}} <span class=\"caret\"></span>\r\n                    </button>\r\n                    <ul *dropdownMenu class=\"dropdown-menu\">\r\n                        <li role=\"menuitem\" *ngFor=\"let item of lists\">\r\n                            <p class=\"dropdown-item\" (click)=\"changeList(item)\">{{item.name}}</p>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <p>Due Date</p>\r\n                <app-date-picker [formControl]=\"$any(editCardForm.controls['dueDate'])\"></app-date-picker>\r\n            </div>\r\n            <div>\r\n                <p>Priority</p>\r\n                <div class=\"btn-group\" dropdown>\r\n                    <button dropdownToggle class=\"select dropdown-toggle\">\r\n                        {{editCardForm.value['priority']}} <span class=\"caret\"></span>\r\n                    </button>\r\n                    <ul *dropdownMenu class=\"dropdown-menu\">\r\n                        <li role=\"menuitem\" *ngFor=\"let priority of priorities\">\r\n                            <p class=\"dropdown-item\" (click)=\"changePriority(priority)\">{{priority}}</p>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n            <p>Description</p>\r\n            <textarea formControlName=\"description\" class=\"description\">{{description}}</textarea>\r\n        </form>\r\n    </div>\r\n</div>\r\n<div class=\"container\">\r\n    <div class=\"footer\">\r\n        <button \r\n            class=\"button save\" \r\n            (click)=\"saveChanges()\" \r\n        >Save</button>\r\n        <button class=\"button cancel\" (click)=\"bsModalRef.hide()\">Cancel</button>\r\n    </div>\r\n</div>"
        },
        {
            "name": "EditListComponent",
            "id": "component-EditListComponent-91d5da9578e772436b1b6ed6e43eeaa13d43a62cc289b9690aebb6bda1f4a2c33eab1f52fb631022e03895463761ee95edf4a7b906395e0ae4e90c1ac5427665",
            "file": "src/app/modules/lists/components/edit-list/edit-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-edit-list",
            "styleUrls": [
                "./edit-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./edit-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "boardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "name",
                    "defaultValue": "'Initial value'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "changeEditMode",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "initialName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "changeMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "editList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Output, Input, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { editList } from 'src/app/modules/core/store/actions/board.action';\n\n@Component({\n  selector: 'app-edit-list',\n  templateUrl: './edit-list.component.html',\n  styleUrls: ['./edit-list.component.css']\n})\nexport class EditListComponent implements OnInit {\n  @Output() changeEditMode = new EventEmitter();\n  @Input() name?: string = 'Initial value';\n  @Input() id?: number;\n  @Input() boardId?: number;\n  initialName? = '';\n\n  constructor(private store: Store){}\n\n  ngOnInit(): void {\n    this.initialName = this.name;\n  }\n  \n  editList() {\n    if (this.name && this.id){\n      this.store.dispatch(editList({list: {listId: this.id, name: this.name}}));\n      this.changeMode();\n    }\n  }\n\n  changeMode(){\n    this.changeEditMode.emit();\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".input {\r\n    display: block;\r\n    width: 100%;\r\n    border-radius: 5px;\r\n    padding: 4px 3px;\r\n    background-color: var(--priority-grey);\r\n    border: 1px solid var(--border-grey);\r\n}\r\n\r\ninput::placeholder {\r\n    color: var(--black);\r\n}\r\n\r\n.buttons {\r\n    display: flex;\r\n    column-gap: 5px;\r\n}\r\n\r\n.button {\r\n    display: block;\r\n    width: 100%;\r\n    margin: 5px 0;\r\n    padding: 8px 19px;\r\n    border-radius: 5px;\r\n}\r\n\r\n.add {\r\n    background-color: var(--blue);\r\n    color: var(--white);\r\n    border: 1px solid var(--blue);\r\n}\r\n\r\n.cancel {\r\n    background-color: var(--white);\r\n    color: var(--black);\r\n    border: 1px solid var(--border-grey);\r\n}\r\n\r\n.button-disabled {\r\n    background-color: var(--blue-disabled);\r\n    border: 1px solid var(--blue-disabled);\r\n}",
                    "styleUrl": "./edit-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\n    <input \n        class=\"input\" \n        name=\"title\" \n        placeholder=\"Enter list title...\"\n        [(ngModel)]=\"name\"\n    >\n    <div class=\"buttons\">\n        <button \n            class=\"button add\" \n            [class.button-disabled]=\"initialName === name\"\n            (click)=\"editList()\" \n            [disabled]=\"initialName === name\"\n            disabled=\"{{initialName === name}}\"\n        >Save</button>\n        <button class=\"button cancel\" (click)=\"changeMode()\">Cancel</button>\n    </div>\n</div>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-cad94b233ec8e80ceb541e7972c5f9737e08237b4e137112f3987ca48ee0cce5c0d57798d41daa5d4d24d6bdbb2df1606ab68cca2aa0a1785e38f99f3cac0729",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            [primary]=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from './button.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-header',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  template: `<header>\n    <div class=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            [primary]=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "HistoryComponent",
            "id": "component-HistoryComponent-5646089cbcb0bfb58cce0645374e92df99f78654cea1215549716ee4773b72ca1c34b0359e1f2c8a576e2b62201cfce493dfe5dc394f662bd536dc3fddc29070",
            "file": "src/app/modules/history/components/history/history.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-history",
            "styleUrls": [
                "./history.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./history.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "boardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "hideHistory",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "loggedActivity",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Activity[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "pageSize",
                    "defaultValue": "20",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "totalCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "getLoggedActivity",
                    "args": [
                        {
                            "name": "boardId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "boardId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showMore",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { HistoryService } from '../../services/history.service';\nimport { Activity } from '../../models/activity';\n\n@Component({\n  selector: 'app-history',\n  templateUrl: './history.component.html',\n  styleUrls: ['./history.component.css']\n})\nexport class HistoryComponent implements OnInit {\n  @Output() hideHistory = new EventEmitter();\n  @Input() boardId?: number;\n  pageSize: number = 20;\n  totalCount?: number;\n  loggedActivity: Activity[] = [];\n\n  constructor(private historyService: HistoryService) {}\n\n  ngOnInit(): void {\n    if (this.boardId) this.getLoggedActivity(this.boardId, this.pageSize);\n  }\n\n  getLoggedActivity(boardId: number, pageSize: number){\n    this.historyService.getLoggedActivity(boardId, pageSize).subscribe({\n      next: (value) => {\n        this.loggedActivity = value.activities;\n        this.totalCount = value.totalCount;\n        this.pageSize = value.pageSize;\n      } \n    })\n  }\n\n  showMore(){\n    const pageSizeIncrements = [20, 40, 60, 80, 100, 120, 140, 160];\n    const currentIndex = pageSizeIncrements.indexOf(this.pageSize);\n    if (currentIndex !== -1 && currentIndex < pageSizeIncrements.length - 1) {\n      const nextPageSize = pageSizeIncrements[currentIndex + 1];\n      if (this.boardId) this.getLoggedActivity(this.boardId, nextPageSize);\n      this.pageSize = nextPageSize;\n    }\n  }\n\n  hide(){\n    this.hideHistory.emit(false);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".history {\r\n    position: fixed;\r\n    top: 0;\r\n    bottom: 0;\r\n    right: 0;\r\n    width: 27%;\r\n    height: 100%;\r\n    background-color: var(--priority-grey);\r\n    z-index: 999;\r\n}\r\n\r\n.history-top { \r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n}\r\n\r\n.history-header {\r\n    background-color: var(--blue);\r\n}\r\n\r\n.container {\r\n    padding: 15px 13px;\r\n}\r\n\r\n.content-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n    height: 550px;\r\n    /* padding: 13px 0 13px 13px; */\r\n    padding: 15px;\r\n}\r\n\r\n.title {\r\n    font-weight: 500;\r\n    color: var(--white);\r\n    margin-bottom: 0;\r\n}\r\n\r\n.history-body {\r\n    background-color: var(--priority-grey);\r\n}\r\n\r\n.history-content {\r\n    display: flex;\r\n    flex-direction: column;\r\n    row-gap: 15px;\r\n\r\n    overflow-y: scroll;\r\n\r\n    color: var(--font-grey);\r\n    font-weight: 500;\r\n    font-size: 0.9rem;\r\n}\r\n\r\n.button {\r\n    display: block;\r\n    width: 100%;\r\n    margin: 20px auto;\r\n    padding: 8px 19px;\r\n    border: 1px solid var(--black);\r\n    background-color: var(--priority-grey);\r\n    color: var(--black);\r\n    border-radius: 5px;\r\n    font-family: 'Inter', sans-serif;\r\n    cursor: pointer;\r\n}\r\n\r\n.scroll-wrapper {\r\n    overflow-y: auto; \r\n    scrollbar-width: thin; \r\n    scrollbar-color: rgba(0, 0, 0, 0) rgba(0, 0, 0, 0); \r\n}\r\n\r\n.scroll-wrapper::-webkit-scrollbar {\r\n    width: 9px; \r\n}\r\n  \r\n.scroll-wrapper::-webkit-scrollbar-thumb {\r\n    background-color: rgba(0, 0, 0, 0.3); \r\n    border-radius: 4px; \r\n}\r\n  \r\n.scroll-wrapper::-webkit-scrollbar-track {\r\n    background-color: rgba(0, 0, 0, 0.1); \r\n}\r\n\r\n.white {\r\n    color: var(--white);\r\n}\r\n\r\nul {\r\n    padding: 0;\r\n    margin: 0;\r\n}\r\n\r\n@media (max-width: 1050px) {\r\n    .history {\r\n        width: 50%;\r\n    }\r\n}\r\n\r\n@media (max-width: 600px) {\r\n    .history {\r\n        width: 100%;\r\n    }\r\n}",
                    "styleUrl": "./history.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "historyService",
                        "type": "HistoryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "historyService",
                        "type": "HistoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"history\">\n    <div class=\"history-header\">\n        <div class=\"container\">\n            <section class=\"history-top\">\n                <h5 class=\"title\">History</h5>\n                <button (click)=\"hide()\" >\n                    <i class=\"fa fa-times white\"></i>\n                </button>\n            </section>\n        </div>\n    </div>\n    <div class=\"history-body\">\n        <div class=\"content-container\">\n            <ul class=\"history-content scroll-wrapper\">\n                <li *ngFor=\"let activity of loggedActivity\">\n                    <app-activity \n                        [cardName]=\"activity.cardName\"\n                        [activityName]=\"activity.activityName\"\n                        [date]=\"activity.date\"\n                        [previousValue]=\"activity.previous\"\n                        [updatedValue]=\"activity.updated\"\n                        [listName]=\"activity.listName\"\n                    ></app-activity>\n                </li>\n                <button class=\"button\" *ngIf=\"totalCount && pageSize && totalCount > pageSize\" (click)=\"showMore()\">Show more</button>\n            </ul>\n        </div>\n    </div>\n</div>"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-5301093cf47f17e2c473b8407b52673dd8da3283a29e6d5cb400ae3de915453ee9bc4569836cad57e03dc1204163ba937447692b3cb12a3afe52d4c49738d395",
            "file": "src/app/modules/home/components/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor(){}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\r\n    padding: 20px;\r\n    margin: 0 auto;\r\n}\r\n\r\n.heading {\r\n    font-weight: 500;\r\n    font-size: 1.2rem;\r\n    margin-bottom: 20px;\r\n}",
                    "styleUrl": "./home.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\n    <h5 class=\"heading\">Your boards</h5>\n    <app-boards></app-boards>\n</div>"
        },
        {
            "name": "InputComponent",
            "id": "component-InputComponent-6b6aa4c1143ffad293c822b890ef07d9a05630b68a49c084c1f62bb11482be91972edbb82224365daf70f5cd4484df0a7300699f10a9d24a5f0b62b6e4642ae7",
            "file": "src/app/modules/shared/components/input/input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-input",
            "styleUrls": [
                "./input.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./input.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "inputType",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "\"primary\" | \"secondary\"",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-input',\n  templateUrl: './input.component.html',\n  styleUrls: ['./input.component.css']\n})\nexport class InputComponent {\n  @Input() placeholder: string = '';\n  @Input() primary: boolean = true;\n  @Input() inputType: 'primary' | 'secondary' = 'primary';\n\n  public get inputClass(): string[] {\n    const mode = this.primary ? 'input--primary' : 'input--secondary';\n    return ['input', `input--${this.inputType}`, mode]\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".input {\r\n    display: block;\r\n    width: 200px;\r\n    border-radius: 5px;\r\n    padding: 4px 3px;\r\n}\r\n\r\n.input--primary {\r\n    background-color: var(--priority-grey);\r\n    border: 1px solid var(--border-grey);\r\n}\r\n\r\n.input--secondary {\r\n    background-color: var(--white);\r\n    border: 1px solid var(--border-grey);\r\n}\r\n\r\n.input--primary::placeholder {\r\n    color: var(--black);\r\n}\r\n\r\n.input--secondary::placeholder {\r\n    color: var(--font-grey);\r\n}",
                    "styleUrl": "./input.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "inputClass": {
                    "name": "inputClass",
                    "getSignature": {
                        "name": "inputClass",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 13
                    }
                }
            },
            "templateData": "<input class=\"input\" placeholder=\"{{placeholder}}\" [ngClass]=\"inputClass\">"
        },
        {
            "name": "ListComponent",
            "id": "component-ListComponent-fe1c187cc22a5118d0814f05151f25adcce9c304e17206e714ccf1a484993c3818a67413ee1ea7bb2e50a423ab900a402599a480d7a8eab9f5be2fa0dcd795cf",
            "file": "src/app/modules/lists/components/list/list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-list",
            "styleUrls": [
                "./list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "boardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "cards",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "Card[]",
                    "decorators": []
                },
                {
                    "name": "count",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "listId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "listName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "lists",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "ListsWithIds[]",
                    "decorators": []
                },
                {
                    "name": "ordinalNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "priorities",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bsModalRef",
                    "defaultValue": "new BsModalRef<AddCardComponent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BsModalRef<AddCardComponent>",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "editListMode",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "rightContextMenu",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "changeEditMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deleteList",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isDivisibleByFour",
                    "args": [
                        {
                            "name": "num",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "num",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openCreateCardModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { BsModalRef, BsModalService, ModalOptions } from 'ngx-bootstrap/modal';\r\nimport { Card } from 'src/app/modules/cards/models/card';\r\nimport { AddCardComponent } from 'src/app/modules/modals/components/add-card/add-card.component';\r\nimport { ListsWithIds } from '../../models/list';\r\nimport { Store } from '@ngrx/store';\r\nimport { deleteList } from 'src/app/modules/core/store/actions/board.action';\r\n\r\n@Component({\r\n  selector: 'app-list',\r\n  templateUrl: './list.component.html',\r\n  styleUrls: ['./list.component.css']\r\n})\r\nexport class ListComponent {\r\n  @Input() listName?: string;\r\n  @Input() listId?: number;\r\n  @Input() boardId?: number;\r\n  @Input() count?: number;\r\n  @Input() cards: Card[] = [];\r\n  @Input() lists: ListsWithIds[] = [];\r\n  @Input() priorities: string[] = [];\r\n  editListMode = false;\r\n  bsModalRef: BsModalRef<AddCardComponent> = new BsModalRef<AddCardComponent>();\r\n  @Input() ordinalNumber?: number;\r\n  rightContextMenu = true;\r\n\r\n  constructor(private store: Store, private modalService: BsModalService){}\r\n\r\n  deleteList(id: number) {\r\n    this.store.dispatch(deleteList({id}));\r\n  } \r\n  \r\n  openCreateCardModal(){\r\n    const initialState: ModalOptions = {\r\n      initialState: {\r\n        lists: this.lists,\r\n        priorities: this.priorities,\r\n        listId: this.listId,\r\n        boardId: this.boardId,\r\n        listName: this.listName\r\n      }\r\n    }\r\n    this.bsModalRef = this.modalService.show(AddCardComponent, initialState);\r\n  }\r\n\r\n  changeEditMode(){\r\n    this.editListMode = !this.editListMode;\r\n  }\r\n\r\n  isDivisibleByFour(num: number): boolean {\r\n    return num % 4 === 0;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    border-top: 1.5px solid var(--border-grey);\r\n    border-bottom: 1.5px solid var(--border-grey);\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.list-name {\r\n    margin: 15px 0;\r\n    font-size: 1.1rem;\r\n}\r\n\r\n.count {\r\n    margin-right: 10px;\r\n}\r\n\r\n.button-toggle {\r\n    width: 15px;\r\n    background-color: rbga(255, 255, 255, 0);\r\n    border: none;\r\n}\r\n\r\n.header__button {\r\n    display: flex;\r\n    align-items: center;\r\n    column-gap: 3px;\r\n}\r\n\r\n.button-context {\r\n    width: 20px;\r\n    height: 20px;\r\n    cursor: pointer;\r\n}\r\n\r\n.button {\r\n    display: block;\r\n    width: 100%;\r\n    padding: 8px 19px;\r\n    margin-bottom: 10px;\r\n    background-color: var(--white);\r\n    border: 1.5px dotted var(--border-grey);\r\n    border-radius: 6px;\r\n    font-family: 'Inter', sans-serif;\r\n    font-size: 0.95rem;\r\n    font-weight: 500;\r\n    cursor: pointer;\r\n}\r\n\r\n.delete {\r\n    color: var(--red);\r\n}\r\n\r\n.dropdown-toggle, .dropdown-item {\r\n    cursor: pointer;\r\n}\r\n\r\n.pointer {\r\n    cursor: pointer;\r\n}",
                    "styleUrl": "./list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modalService",
                        "type": "BsModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "BsModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"container\" *ngIf=\"!editListMode\">\r\n    <header class=\"header\">\r\n        <h5 class=\"list-name\">{{listName}}</h5>\r\n        <div class=\"header__button\">\r\n            <p class=\"count\">{{count}}</p>\r\n            <div class=\"dropdown\" dropdown>\r\n                <button dropdownToggle class=\"button-toggle\">\r\n                    <i class=\"fa fa-ellipsis-v\"></i>\r\n                </button>\r\n                <div class=\"dropdown-menu\" *dropdownMenu [class.dropdown-menu-right]=\"isDivisibleByFour(ordinalNumber!)\">\r\n                    <p class=\"dropdown-item\" (click)=\"changeEditMode()\">\r\n                        <i class=\"fa fa-edit\"></i>\r\n                        Edit\r\n                    </p>\r\n                    <p class=\"dropdown-item delete\" (click)=\"deleteList(listId!)\">\r\n                        <i class=\"fa fa-trash\"></i>\r\n                        Delete\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </header>\r\n    <button class=\"button\" (click)=\"openCreateCardModal()\">+ Add new card</button>\r\n    <div *ngIf=\"!editListMode\">\r\n        <app-card\r\n            *ngFor=\"let card of cards; let i = index\"\r\n            [id]=\"card.id\"\r\n            [name]=\"card.name\" \r\n            [description]=\"card.description\"\r\n            [dueDate]=\"card.dueDate\"\r\n            [priority]=\"card.priority\"\r\n            [list]=\"listName\"\r\n            [listId]=\"listId\"\r\n            [boardId]=\"boardId\"\r\n            [lists]=\"lists\"\r\n            [rightContextMenu]=\"isDivisibleByFour(ordinalNumber!)\"\r\n        ></app-card>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"container\" *ngIf=\"editListMode\">\r\n    <app-edit-list [name]=\"listName\" [id]=\"listId\" [boardId]=\"boardId\" (changeEditMode)=\"changeEditMode()\"></app-edit-list>\r\n</div>"
        },
        {
            "name": "ListsComponent",
            "id": "component-ListsComponent-4ec3f386fd4c3748879def15ad504213a978700e643f7aedbd354179a56ebde67ac4f280f1ce069cc83776874cf20fd8c42771063b3fc8828bf69c76e334a628",
            "file": "src/app/modules/lists/components/lists/lists.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-lists",
            "styleUrls": [
                "./lists.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./lists.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "boardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "lists",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "List[]",
                    "decorators": []
                },
                {
                    "name": "listsNames",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "ListsWithIds[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "createListMode",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "listsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ListsService",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changeMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { ListsService } from '../../services/lists.service';\nimport { List, ListsWithIds } from '../../models/list';\n\n@Component({\n  selector: 'app-lists',\n  templateUrl: './lists.component.html',\n  styleUrls: ['./lists.component.css']\n})\nexport class ListsComponent {\n  @Input() lists: List[] = [];\n  @Input() listsNames: ListsWithIds[] = [];\n  @Input() boardId?: number;\n  createListMode = false;\n\n  constructor(public listsService: ListsService){}\n\n  changeMode(){\n    this.createListMode = !this.createListMode;\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\r\n    display: grid;\r\n    grid-template-columns: repeat(4, 1fr);\r\n    gap: 25px;\r\n}\r\n\r\n.header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    border-top: 1.5px solid var(--border-grey);\r\n    border-bottom: 1.5px solid var(--border-grey);\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.pointer {\r\n    cursor: pointer;\r\n}\r\n\r\n.list-name {\r\n    margin: 15px 0;\r\n    font-size: 1.1rem;\r\n}\r\n\r\n.header__button {\r\n    display: flex;\r\n    align-items: center;\r\n    column-gap: 3px;\r\n}\r\n\r\n.button-toggle {\r\n    width: 15px;\r\n    background-color: rbga(255, 255, 255, 0);\r\n    border: none;\r\n}\r\n\r\n@media (max-width: 1000px) {\r\n    .container {\r\n        grid-template-columns: repeat(3, 1fr);\r\n    }\r\n}\r\n\r\n@media (max-width: 800px) {\r\n    .container {\r\n        grid-template-columns: repeat(2, 1fr);\r\n    }\r\n}\r\n\r\n@media (max-width: 600px) {\r\n    .container {\r\n        grid-template-columns: 1fr;\r\n    }\r\n}\r\n",
                    "styleUrl": "./lists.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "listsService",
                        "type": "ListsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "listsService",
                        "type": "ListsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"container\">\r\n    <app-list\r\n        *ngFor=\"let list of lists; let i = index\"\r\n        [listName]=\"list.name\"\r\n        [listId]=\"list.id\"\r\n        [boardId]=\"boardId\"\r\n        [count]=\"list.cards.length\"\r\n        [cards]=\"list.cards\"\r\n        [lists]=\"listsNames\"\r\n        [priorities]=\"['Low', 'Medium', 'High']\"\r\n        [ordinalNumber]=\"i + 1\"\r\n    ></app-list>\r\n    <div>\r\n        <app-add-list (changeEditMode)=\"changeMode()\" *ngIf=\"createListMode\" [boardId]=\"boardId\"></app-add-list>\r\n        <header class=\"header pointer\" *ngIf=\"!createListMode\">\r\n            <h5 class=\"list-name\">Add another list</h5>\r\n            <div class=\"header__button\">\r\n                <button class=\"button-toggle\" (click)=\"changeMode()\">\r\n                    <i class=\"fa fa-plus\"></i>\r\n                </button>\r\n            </div>\r\n        </header>\r\n    </div>\r\n</div>"
        },
        {
            "name": "ModalComponent",
            "id": "component-ModalComponent-4999e6fdcbd0c4f80422407802b7709d978b52b62443d8c3fa0cc4139c31efb4176a6979db98da54b04dac8871cbecb7891eab4643985e9ef4a4195a1e80167d",
            "file": "src/app/modules/shared/components/modal/modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-modal",
            "styleUrls": [
                "./modal.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activities",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "description",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "dueDate",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "list",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "listId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "lists",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ListsWithIds[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "name",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "priorities",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "priority",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Activity } from 'src/app/modules/history/models/activity';\nimport { ListsWithIds } from 'src/app/modules/lists/models/list';\n\n@Component({\n  selector: 'app-modal',\n  templateUrl: './modal.component.html',\n  styleUrls: ['./modal.component.css']\n})\nexport class ModalComponent {\n  id?: number;\n  name = '';\n  description = '';\n  dueDate = '';\n  priority = '';\n  list = '';\n  activities: any[] = [];\n  listId?: number; \n  lists: ListsWithIds[] = []; \n  priorities: string[] = [];\n  \n  constructor(){}\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".header {\r\n    background-color: var(--blue);\r\n    padding: 12px 0 20px;\r\n    border-top-left-radius: 10px;\r\n    border-top-right-radius: 10px;\r\n}\r\n\r\n.container {\r\n    padding: 10px;\r\n}\r\n\r\n.button {\r\n    padding: 5px 12px;\r\n    border: 1px solid var(--border-grey);\r\n    background-color: var(--white);\r\n    border-radius: 5px;\r\n    font-family: 'Inter', sans-serif;\r\n    cursor: pointer;\r\n}\r\n\r\n.close {\r\n    margin-bottom: 5px;\r\n}\r\n\r\n.body {\r\n    border: 1px solid var(--border-grey);\r\n    border-bottom-left-radius: 10px;\r\n    border-bottom-right-radius: 10px;\r\n    border-top: none;\r\n}\r\n\r\n.modal__content {\r\n    display: grid;\r\n    width: 100%;\r\n    justify-content: space-between;\r\n    grid-template-columns: 65% 35%;\r\n}\r\n\r\n.modal {\r\n    border-radius: 10px;\r\n}\r\n\r\n.modal-content {\r\n    width: 750px;\r\n    height: 600px;\r\n}\r\n\r\n.modal-dialog {\r\n    min-width: 850px;\r\n    min-height: 750px;\r\n}\r\n\r\n.modal__body {\r\n    display: flex;\r\n    flex-direction: column;\r\n    row-gap: 5px;\r\n    padding: 5px;\r\n}\r\n\r\n.modal__header {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n}\r\n\r\n.name {\r\n    font-size: 1.15rem;\r\n    font-weight: 500;\r\n    color: var(--black);\r\n    margin-bottom: 15px;\r\n}\r\n\r\n.description {\r\n    margin: 25px 0;\r\n}\r\n\r\n.description__heading {\r\n    font-size: 1.05rem;\r\n    font-weight: 500;\r\n    color: var(--black);\r\n}\r\n\r\n.description__text {\r\n    color: var(--font-grey);\r\n}\r\n\r\n.card-info {\r\n    border-collapse: collapse; \r\n    width: 65%;\r\n}\r\n\r\n.info {\r\n    border: none; \r\n}\r\n\r\n.info__name {\r\n    color: var(--font-grey);\r\n    font-weight: 500;\r\n    font-size: 0.9rem;\r\n    padding-left: 0;\r\n}\r\n\r\n.info__value {\r\n    padding: 8px; \r\n}\r\n\r\n.modal__activity {\r\n    height: 100%;\r\n    padding: 5px;\r\n    background-color: var(--priority-grey);\r\n    border-bottom-right-radius: 10px;\r\n}\r\n\r\n.activity__list {\r\n    display: flex;\r\n    flex-direction: column;\r\n    row-gap: 15px;\r\n    color: var(--font-grey);\r\n    font-weight: 500;\r\n    font-size: 0.9rem;\r\n}",
                    "styleUrl": "./modal.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 20
            },
            "extends": [],
            "templateData": "<div class=\"header\">\n    <div class=\"container\">\n        <button type=\"button\" class=\"btn-close close pull-right\">\n            <span class=\"visually-hidden close\">&times;</span>\n        </button>\n    </div>\n</div>\n<div class=\"body\">\n    <div class=\"modal__content\">\n        <div class=\"modal__body\">\n            <div class=\"container\">\n                <div class=\"modal__header\">\n                    <h4 class=\"name\">{{name}}</h4>\n                    <button class=\"button\">Edit card</button>\n                </div>\n                <table class=\"card-info\">\n                    <tr class=\"info\">\n                        <td class=\"info__name\">\n                            <i class=\"fa fa-list\"></i>\n                            List\n                        </td>\n                        <td class=\"info__value\">{{list}}</td>\n                    </tr>\n                    <tr class=\"info\">\n                        <td class=\"info__name\">\n                            <i class=\"fa fa-calendar-o\"></i>\n                            Due Date\n                        </td>\n                        <td class=\"info__value\">{{dueDate | date}}</td>\n                    </tr>\n                    <tr class=\"info\">\n                        <td class=\"info__name\">\n                            <i class=\"fa fa-tag\"></i>\n                            Priority\n                        </td>\n                        <td class=\"info__value\">{{priority}}</td>\n                    </tr>\n                </table>                \n                <div class=\"description\">\n                    <h5 class=\"description__heading\">Description</h5>\n                    <p class=\"description__text\">{{description}}</p>\n                </div>\n            </div>\n        </div>\n        <div class=\"modal__activity\">\n            <div class=\"container\">\n                <h4 class=\"name\">Activity</h4>\n                <ul class=\"activity__list\">\n                    <app-activity \n                        *ngFor=\"let activity of activities\"\n                        [cardName]=\"activity.cardName\"\n                        [activityName]=\"activity.activityName\"\n                        [date]=\"activity.date\"\n                        [previousValue]=\"activity.previous\"\n                        [updatedValue]=\"activity.updated\"\n                        [listName]=\"activity.listName\"\n                    ></app-activity>\n                </ul>\n            </div>\n        </div>\n    </div>\n</div>"
        },
        {
            "name": "OpenCardComponent",
            "id": "component-OpenCardComponent-be30b75ed4e8905abac2d978b643faeab73b320f224de2c97d6ea68d3f5342ad5d6492274e3cef20eedc1bd83a9ddabb4c2448267fbfe5e9424b278ee9c792d4",
            "file": "src/app/modules/modals/components/open-card/open-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-open-card",
            "styleUrls": [
                "./open-card.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./open-card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activities",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Activity[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "bsModalRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BsModalRef",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "description",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "dueDate",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "list",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "listId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "lists",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ListsWithIds[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "name",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "priorities",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "priority",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "editCard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCardActivity",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { BsModalRef, BsModalService, ModalOptions } from 'ngx-bootstrap/modal';\r\nimport { Activity } from 'src/app/modules/history/models/activity';\r\nimport { HistoryService } from 'src/app/modules/history/services/history.service';\r\nimport { EditCardComponent } from '../edit-card/edit-card.component';\r\nimport { ListsWithIds } from 'src/app/modules/lists/models/list';\r\n\r\n@Component({\r\n  selector: 'app-open-card',\r\n  templateUrl: './open-card.component.html',\r\n  styleUrls: ['./open-card.component.css']\r\n})\r\nexport class OpenCardComponent implements OnInit {\r\n  id?: number;\r\n  name = '';\r\n  description = '';\r\n  dueDate = '';\r\n  priority = '';\r\n  list = '';\r\n  activities: Activity[] = [];\r\n\r\n  listId?: number; \r\n  lists: ListsWithIds[] = []; \r\n  priorities: string[] = [];\r\n  \r\n  constructor(private historyService: HistoryService, public bsModalRef: BsModalRef, private modalService: BsModalService){}\r\n\r\n  ngOnInit(): void {\r\n    this.id && this.getCardActivity(this.id);\r\n  }\r\n\r\n  getCardActivity(id: number){\r\n    this.historyService.getLoggedActivityByCardId(id).subscribe({\r\n      next: response => this.activities = response\r\n    })\r\n  }\r\n\r\n  editCard(){\r\n    const initialState: ModalOptions = {\r\n      initialState: {\r\n        cardId: this.id,\r\n        cardName: this.name,\r\n        description: this.description,\r\n        dueDate: this.dueDate,\r\n        priority: this.priority,\r\n        listName: this.list,\r\n        listId: this.listId,\r\n        lists: this.lists,\r\n        priorities: this.priorities\r\n      }\r\n    }\r\n    this.bsModalRef.hide();\r\n    this.bsModalRef = this.modalService.show(EditCardComponent, initialState);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".modal-header {\r\n    background-color: var(--blue);\r\n    padding: 0;\r\n}\r\n\r\n.modal {\r\n    width: 700px !important;\r\n}\r\n\r\n.container {\r\n    padding: 10px;\r\n}\r\n\r\n.button {\r\n    padding: 5px 12px;\r\n    border: 1px solid var(--border-grey);\r\n    background-color: var(--white);\r\n    border-radius: 5px;\r\n    font-family: 'Inter', sans-serif;\r\n    cursor: pointer;\r\n}\r\n\r\n.modal {\r\n    border-radius: 10px;\r\n}\r\n\r\n.modal-content {\r\n    width: 750px;\r\n    height: 600px;\r\n}\r\n\r\n.modal-dialog {\r\n    min-width: 850px;\r\n    min-height: 750px;\r\n}\r\n\r\n.modal__body {\r\n    display: flex;\r\n    flex-direction: column;\r\n    row-gap: 5px;\r\n    padding: 5px;\r\n}\r\n\r\n.modal__header {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n}\r\n\r\n.name {\r\n    font-size: 1.15rem;\r\n    font-weight: 500;\r\n    color: var(--black);\r\n    margin-bottom: 15px;\r\n}\r\n\r\n.description {\r\n    margin: 25px 0;\r\n}\r\n\r\n.description__heading {\r\n    font-size: 1.05rem;\r\n    font-weight: 500;\r\n    color: var(--black);\r\n}\r\n\r\n.description__text {\r\n    color: var(--font-grey);\r\n}\r\n\r\n.card-info {\r\n    border-collapse: collapse; \r\n    width: 65%;\r\n}\r\n\r\n.info {\r\n    border: none; \r\n}\r\n\r\n.info__name {\r\n    color: var(--font-grey);\r\n    font-weight: 500;\r\n    font-size: 0.9rem;\r\n    padding-left: 0;\r\n}\r\n\r\n.info__value {\r\n    padding: 8px; \r\n}\r\n\r\n.modal__content {\r\n    display: grid;\r\n    grid-template-columns: 65% 35%;\r\n}\r\n\r\n/* Activity */\r\n\r\n.modal__activity {\r\n    padding: 5px;\r\n    background-color: var(--priority-grey);\r\n}\r\n\r\n.activity__list {\r\n    display: flex;\r\n    flex-direction: column;\r\n    row-gap: 15px;\r\n\r\n    /* overflow-y: scroll; */\r\n\r\n    color: var(--font-grey);\r\n    font-weight: 500;\r\n    font-size: 0.9rem;\r\n}",
                    "styleUrl": "./open-card.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "historyService",
                        "type": "HistoryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "bsModalRef",
                        "type": "BsModalRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modalService",
                        "type": "BsModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "historyService",
                        "type": "HistoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bsModalRef",
                        "type": "BsModalRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "BsModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"modal-header\">\r\n    <div class=\"container\">\r\n        <button type=\"button\" class=\"btn-close close pull-right\" (click)=\"bsModalRef.hide()\">\r\n            <span class=\"visually-hidden close\">&times;</span>\r\n        </button>\r\n    </div>\r\n</div>\r\n<div class=\"body\">\r\n    <div class=\"modal__content\">\r\n        <div class=\"modal__body\">\r\n            <div class=\"container\">\r\n                <div class=\"modal__header\">\r\n                    <h4 class=\"name\">{{name}}</h4>\r\n                    <button class=\"button\" (click)=\"editCard()\">Edit card</button>\r\n                </div>\r\n                <table class=\"card-info\">\r\n                    <tr class=\"info\">\r\n                        <td class=\"info__name\">\r\n                            <i class=\"fa fa-list\"></i>\r\n                            List\r\n                        </td>\r\n                        <td class=\"info__value\">{{list}}</td>\r\n                    </tr>\r\n                    <tr class=\"info\">\r\n                        <td class=\"info__name\">\r\n                            <i class=\"fa fa-calendar-o\"></i>\r\n                            Due Date\r\n                        </td>\r\n                        <td class=\"info__value\">{{dueDate | date}}</td>\r\n                    </tr>\r\n                    <tr class=\"info\">\r\n                        <td class=\"info__name\">\r\n                            <i class=\"fa fa-tag\"></i>\r\n                            Priority\r\n                        </td>\r\n                        <td class=\"info__value\">{{priority}}</td>\r\n                    </tr>\r\n                </table>                \r\n                <div class=\"description\">\r\n                    <h5 class=\"description__heading\">Description</h5>\r\n                    <p class=\"description__text\">{{description}}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"modal__activity\">\r\n            <div class=\"container\">\r\n                <h4 class=\"name\">Activity</h4>\r\n                <ul class=\"activity__list\">\r\n                    <app-activity \r\n                        *ngFor=\"let activity of activities\"\r\n                        [cardName]=\"activity.cardName\"\r\n                        [activityName]=\"activity.activityName\"\r\n                        [date]=\"activity.date\"\r\n                        [previousValue]=\"activity.previous\"\r\n                        [updatedValue]=\"activity.updated\"\r\n                        [listName]=\"activity.listName\"\r\n                    ></app-activity>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-d32b0f19628254ea3fc5526c4d4564ada1cc83cf936759006d90a46f5874b02a3359e331bddda20b22e74a616a6443c660602ba74dd38ebe1160759e0de6f7ba",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HeaderComponent } from './header.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-page',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent],\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\n.storybook-page h2 {\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\n.storybook-page ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.storybook-page .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-ef29c7eb9d2fdad523f0138b19c7944c4fc48f78f4c81b9c769f793d44cf11ac35cf9823b99c0e9794ebe1f809d004a8f0cd9da3d07b0f9ea616077e9618bdcb",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\nimport { AppComponent } from './app.component';\nimport { ListsModule } from './modules/lists/lists.module';\nimport { SharedModule } from './modules/shared/shared.module';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { HistoryModule } from './modules/history/history.module';\nimport { CoreModule } from './modules/core/core.module';\nimport { LoadingInterceptor } from './modules/core/interceptors/loading.interceptor';\nimport { ErrorInterceptor } from './modules/core/interceptors/error.interceptor';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ModalsModule } from './modules/modals/modals.module';\nimport { BoardsModule } from './modules/boards/boards.module';\nimport { AppRoutingModule } from './app-routing.module';\nimport { HomeModule } from './modules/home/home.module';\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    BsDropdownModule,\n    SharedModule,\n    ModalsModule,\n    CoreModule,\n    ListsModule,\n    HistoryModule,\n    BoardsModule,\n    AppRoutingModule,\n    HomeModule,\n    StoreModule.forRoot({}, {}),\n    EffectsModule.forRoot([]),\n    StoreDevtoolsModule.instrument()\n  ],\n  providers: [\n    {provide: HTTP_INTERCEPTORS, useClass: LoadingInterceptor, multi: true},\n    {provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true},\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ErrorInterceptor"
                        },
                        {
                            "name": "LoadingInterceptor"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "BoardsModule"
                        },
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "HistoryModule"
                        },
                        {
                            "name": "HomeModule"
                        },
                        {
                            "name": "ListsModule"
                        },
                        {
                            "name": "ModalsModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-f21d79f56e8fdba2c89b9203045debd1ef0b72cc29ecd90e2616405bdc7f00398c4d325e1a24ce7c310b9e79c06e97b2650fa8022d9302046283c544efe8dcae",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { BoardComponent } from './modules/boards/components/board/board.component';\nimport { HomeComponent } from './modules/home/components/home/home.component';\n\nconst routes: Routes = [\n  {path: '', component: HomeComponent},\n  {path: 'boards/:id', component: BoardComponent}\n];\n\n@NgModule({\n  declarations: [],\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BoardsModule",
            "id": "module-BoardsModule-e3e79b7b8ee08b40f34014f15738a8f994857a915e8934920d16b982ee908a664494b3520f8f56a90b8b82e9555d55f7df30c17cb2624c97e158dceb4d4ccc3b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/boards/boards.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SharedModule } from '../shared/shared.module';\nimport { BoardComponent } from './components/board/board.component';\nimport { ListsModule } from '../lists/lists.module';\nimport { HistoryModule } from '../history/history.module';\nimport { FormsModule } from '@angular/forms';\nimport { BoardsComponent } from './components/boards/boards.component';\nimport { BoardItemComponent } from './components/board-item/board-item.component';\nimport { RouterModule } from '@angular/router';\nimport { StoreModule } from '@ngrx/store';\nimport { boardsReducer } from '../core/store/reducers/boards.reducer';\nimport { EffectsModule } from '@ngrx/effects';\nimport { BoardsEffects } from '../core/store/effects/boards.effects';\nimport { boardReducer } from '../core/store/reducers/board.reducer';\nimport { BoardEffects } from '../core/store/effects/board.effects';\n\n@NgModule({\n  declarations: [\n    BoardComponent,\n    BoardsComponent,\n    BoardItemComponent,\n  ],\n  imports: [\n    CommonModule,\n    SharedModule,\n    ListsModule,\n    HistoryModule,\n    FormsModule,\n    RouterModule,\n    StoreModule.forFeature(\"boardNames\", boardsReducer),\n    StoreModule.forFeature(\"board\", boardReducer),\n    EffectsModule.forFeature([BoardsEffects, BoardEffects])\n  ],\n  exports: [\n    BoardComponent,\n    BoardsComponent\n  ]\n})\nexport class BoardsModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BoardComponent"
                        },
                        {
                            "name": "BoardItemComponent"
                        },
                        {
                            "name": "BoardsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "HistoryModule"
                        },
                        {
                            "name": "ListsModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BoardComponent"
                        },
                        {
                            "name": "BoardsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CardsModule",
            "id": "module-CardsModule-8219e4ae7088608082a77a2ea8b2e683272acbf482f96d240e1cb91b1efc091c3aa252fc3c1edbd08ab717040c027c5eef9e280bf52d0843720d8d451b4fc874",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/cards/cards.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CardComponent } from './components/card/card.component';\nimport { SharedModule } from '../shared/shared.module';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { boardReducer } from '../core/store/reducers/board.reducer';\nimport { BoardEffects } from '../core/store/effects/board.effects';\n\n@NgModule({\n  declarations: [\n    CardComponent\n  ],\n  imports: [\n    CommonModule,\n    SharedModule,\n    ReactiveFormsModule,\n    FormsModule,\n    BsDropdownModule,\n    StoreModule.forFeature(\"board\", boardReducer),\n    EffectsModule.forFeature([BoardEffects])\n  ],\n  exports: [\n    CardComponent\n  ]\n})\nexport class CardsModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CardComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CardComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "id": "module-CoreModule-7b69717801caf305a03dbdec40e4f8cbb0a12b69df3701a9d901f6e503664b1de4f6936edb9403f5193fb23196d80871ca27b2c9a532205ce7a573d6ddf95e87",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/core/core.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SharedModule } from '../shared/shared.module';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    SharedModule\n  ]\n})\nexport class CoreModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HistoryModule",
            "id": "module-HistoryModule-53d7659f8dd1e0c2d0d8ce296ba1ea257d0fbfa97522176e0720f80f8e45c19fbf97d2e48afa545ca7c8b04fa058766ec249fe8ee959ecbe134951894f661586",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/history/history.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HistoryComponent } from './components/history/history.component';\nimport { SharedModule } from '../shared/shared.module';\nimport { ActivityComponent } from './components/activity/activity.component';\n\n@NgModule({\n  declarations: [\n    HistoryComponent,\n    ActivityComponent\n  ],\n  imports: [\n    CommonModule,\n    SharedModule\n  ],\n  exports: [\n    HistoryComponent,\n    ActivityComponent\n  ]\n})\nexport class HistoryModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ActivityComponent"
                        },
                        {
                            "name": "HistoryComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ActivityComponent"
                        },
                        {
                            "name": "HistoryComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HomeModule",
            "id": "module-HomeModule-7a4b96aebfcc7f69ccef923a93c75181668a9c0cd25d06b280452cffabdc0a5bae43021fd90e556f0ab3dc4dd2411d27951e9f0ffa68083bf5bc5fa414c2d43e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/home/home.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HomeComponent } from './components/home/home.component';\nimport { BoardsModule } from '../boards/boards.module';\n\n@NgModule({\n  declarations: [HomeComponent],\n  imports: [\n    CommonModule,\n    BoardsModule\n  ],\n  exports: [HomeComponent]\n})\nexport class HomeModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HomeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "BoardsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "HomeComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ListsModule",
            "id": "module-ListsModule-98e81d13f9e0e22392769ef421c2f3669ca631122af87d8340ea8d2fcee13605825876a87918fc3f08c7f0bd7181db4ae67b636a32b5bebfb8e77231f836ab35",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/lists/lists.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ListComponent } from './components/list/list.component';\nimport { ListsComponent } from './components/lists/lists.component';\nimport { CardsModule } from '../cards/cards.module';\nimport { SharedModule } from '../shared/shared.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { AddListComponent } from './components/add-list/add-list.component';\nimport { EditListComponent } from './components/edit-list/edit-list.component';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { boardReducer } from '../core/store/reducers/board.reducer';\nimport { BoardEffects } from '../core/store/effects/board.effects';\n\n@NgModule({\n  declarations: [\n    ListComponent,\n    ListsComponent,\n    AddListComponent,\n    EditListComponent\n  ],\n  imports: [\n    CommonModule,\n    CardsModule,\n    SharedModule,\n    ReactiveFormsModule,\n    FormsModule,\n    StoreModule.forFeature(\"board\", boardReducer),\n    EffectsModule.forFeature([BoardEffects])\n  ],\n  exports: [\n    ListsComponent\n  ]\n})\nexport class ListsModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddListComponent"
                        },
                        {
                            "name": "EditListComponent"
                        },
                        {
                            "name": "ListComponent"
                        },
                        {
                            "name": "ListsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CardsModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ListsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ModalsModule",
            "id": "module-ModalsModule-fae7936298f931efc063d80b2f9a4f93ea05541bf81f09228a171b8e4601855755a4f1dddf2bcc3bc681adbcc0510b373f347365b0ffc987a91b93050670dfc6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/modals/modals.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AddCardComponent } from './components/add-card/add-card.component';\nimport { EditCardComponent } from './components/edit-card/edit-card.component';\nimport { OpenCardComponent } from './components/open-card/open-card.component';\nimport { SharedModule } from '../shared/shared.module';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ToastrModule } from 'ngx-toastr';\nimport { ModalModule } from 'ngx-bootstrap/modal';\nimport { HistoryModule } from '../history/history.module';\nimport { ListsModule } from '../lists/lists.module';\nimport { CreateBoardComponent } from './components/create-board/create-board.component';\nimport { EditBoardComponent } from './components/edit-board/edit-board.component';\nimport { EffectsModule } from '@ngrx/effects';\nimport { BoardsEffects } from '../core/store/effects/boards.effects';\nimport { StoreModule } from '@ngrx/store';\nimport { boardsReducer } from '../core/store/reducers/boards.reducer';\nimport { boardReducer } from '../core/store/reducers/board.reducer';\nimport { BoardEffects } from '../core/store/effects/board.effects';\n\n@NgModule({\n  declarations: [\n    AddCardComponent,\n    EditCardComponent,\n    OpenCardComponent,\n    EditBoardComponent,\n    CreateBoardComponent,\n  ],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    SharedModule,\n    ToastrModule,\n    ModalModule,\n    HistoryModule,\n    ListsModule,\n    StoreModule.forFeature(\"board\", boardReducer),\n    StoreModule.forFeature(\"boardNames\", boardsReducer),\n    EffectsModule.forFeature([BoardsEffects, BoardEffects])\n  ],\n  exports: [\n    AddCardComponent,\n    EditCardComponent,\n    OpenCardComponent\n  ]\n})\nexport class ModalsModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddCardComponent"
                        },
                        {
                            "name": "CreateBoardComponent"
                        },
                        {
                            "name": "EditBoardComponent"
                        },
                        {
                            "name": "EditCardComponent"
                        },
                        {
                            "name": "OpenCardComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "HistoryModule"
                        },
                        {
                            "name": "ListsModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AddCardComponent"
                        },
                        {
                            "name": "EditCardComponent"
                        },
                        {
                            "name": "OpenCardComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-c2353f81068441297491cf6a55851de32865252afb74fbf99c749a28cc357361ba655e06888045100d867aa60fd307edd1feb3c8a63f5e9294b319a782510100",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DatePickerComponent } from './components/date-picker/date-picker.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { BsDatepickerModule } from 'ngx-bootstrap/datepicker';\nimport { ModalModule } from 'ngx-bootstrap/modal';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { NgxSpinnerModule } from 'ngx-spinner';\nimport { ToastrModule } from 'ngx-toastr';\nimport { ButtonComponent } from './components/button/button.component';\nimport { InputComponent } from './components/input/input.component';\nimport { CardComponent } from './components/card/card.component';\nimport { ModalComponent } from './components/modal/modal.component';\nimport { HistoryModule } from '../history/history.module';\n\n@NgModule({\n  declarations: [\n    DatePickerComponent,\n    ButtonComponent,\n    InputComponent,\n    CardComponent,\n    ModalComponent\n  ],\n  imports: [\n    CommonModule,\n    HistoryModule,\n    ReactiveFormsModule,\n    BsDatepickerModule.forRoot(),\n    ModalModule.forRoot(),\n    BsDropdownModule.forRoot(),\n    NgxSpinnerModule.forRoot({\n      type: 'timer'\n    }),\n    ToastrModule.forRoot({\n      positionClass: 'toast-bottom-right'\n    })\n  ],\n  exports: [\n    DatePickerComponent,\n    BsDropdownModule,\n    NgxSpinnerModule,\n    ToastrModule\n  ]\n})\nexport class SharedModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "DatePickerComponent"
                        },
                        {
                            "name": "InputComponent"
                        },
                        {
                            "name": "ModalComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "HistoryModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DatePickerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "_boardReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/core/store/reducers/board.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n    initialBoardState, \r\n    on(getBoardSuccess, (_, { board }) => board),\r\n    on(createListSuccess, (state, { list }) => ({ \r\n        ...state,\r\n        lists: [...state.lists, { ...list, cards: [] }],\r\n        listNames: [...state.listNames, {...list}]\r\n    })),\r\n    on(deleteListSuccess, (state, { id }) => ({ \r\n        ...state,\r\n        lists: state.lists.filter(list => list.id !== id) \r\n    })),\r\n    on(editListSuccess, (state, { list }) => ({ \r\n        ...state,\r\n        lists: state.lists.map(existingList => \r\n          existingList.id === list.listId ? { ...existingList, name: list.name } : existingList\r\n        ),\r\n        listNames: state.lists.map(existingList => \r\n          existingList.id === list.listId ? { ...existingList, name: list.name } : existingList\r\n        )\r\n    })),\r\n    on(createCardSuccess, (state, { card }) => {\r\n        const listToUpdate = state.lists.find(list => list.id === card.listId);\r\n        if (!listToUpdate) {\r\n          return state; \r\n        }\r\n    \r\n        const updatedList: any = {\r\n          ...listToUpdate,\r\n          cards: [...listToUpdate.cards, card]\r\n        };\r\n    \r\n        const updatedLists = state.lists.map(list =>\r\n          list.id === updatedList.id ? updatedList : list\r\n        );\r\n\r\n        return {\r\n          ...state,\r\n          lists: updatedLists\r\n        };\r\n    }),\r\n    on(deleteCardSuccess, (state, { id }) => { \r\n        const listToUpdate = state.lists.find(list => list.cards.some(card => card.id === id));\r\n        if (!listToUpdate) {\r\n          return state; \r\n        }\r\n    \r\n        const updatedCards = listToUpdate.cards.filter(card => card.id !== id);\r\n    \r\n        const updatedList: List = {\r\n          ...listToUpdate,\r\n          cards: updatedCards\r\n        };\r\n    \r\n        const updatedLists = state.lists.map(list =>\r\n          list.id === updatedList.id ? updatedList : list\r\n        );\r\n\r\n        return {\r\n          ...state,\r\n          lists: updatedLists\r\n        };\r\n    }),\r\n    on(editCardSuccess, (state, { card }) => {\r\n      let initialList: List | undefined;\r\n      let newList: List | undefined;\r\n      let updatedList: List | undefined;\r\n      let editedCard: Card | undefined;\r\n      let newCard: Partial<Card> | undefined;\r\n\r\n      state.lists.forEach(list => {\r\n          const cardIndex = list.cards.findIndex(c => c.id === card.id);\r\n          if (cardIndex !== -1) {\r\n            initialList = list; \r\n            editedCard = list.cards[cardIndex];\r\n          }\r\n      });\r\n\r\n      if (initialList && editedCard){\r\n        if (initialList.id === card.listId) {\r\n          newCard = {\r\n            id: card.id,\r\n            name: card.name === undefined ? editedCard.name : card.name,\r\n            description: card.description === undefined ? editedCard.description : card.description,\r\n            dueDate: card.dueDate === undefined ? editedCard.dueDate : card.dueDate,\r\n            priority: card.priority === undefined ? editedCard.priority : card.priority,\r\n            listId: card.listId === undefined ? editedCard.listId : card.listId,\r\n            boardId: card.boardId === undefined ? editedCard.boardId : card.boardId\r\n          };\r\n          initialList = {\r\n            ...initialList,\r\n            cards: initialList.cards.filter(card => card.id !== editedCard?.id)\r\n          }\r\n          const updatedCards = [...initialList.cards, newCard];\r\n          initialList = {\r\n            ...initialList,\r\n            cards: updatedCards\r\n          } as List;\r\n        } else { \r\n          initialList = {\r\n            ...initialList,\r\n            cards: initialList.cards.filter(card => card.id !== editedCard?.id)\r\n          }\r\n          newList = state.lists.find(l => l.id === card.listId);\r\n          const updatedCards = [...newList!.cards, card];\r\n          updatedList = {\r\n            ...newList,\r\n            cards: updatedCards as Card[]\r\n          } as List;\r\n        }\r\n      }\r\n  \r\n      let updatedLists: any[];\r\n\r\n      if (updatedList){\r\n        updatedLists = state.lists.filter(l => l.id !== updatedList!.id && l.id !== initialList!.id);\r\n        updatedLists = [...updatedLists, initialList, updatedList];\r\n      } else {\r\n        updatedLists = state.lists.filter(l => l.id !== initialList!.id);\r\n        updatedLists = [...updatedLists, initialList];\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        lists: updatedLists,\r\n      };\r\n    })\r\n)"
            },
            {
                "name": "_boardsReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/core/store/reducers/boards.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n    initialBoardsState, \r\n    on(getBoardsSuccess, (_, { allBoards }) => allBoards),\r\n    on(createBoardSuccess, (state, { board }) => [board, ...state]),\r\n    on(deleteBoardSuccess, (state, { id }) => state.filter(board => board.id !== id)),\r\n    on(editBoardSuccess, (state, { board }) => {\r\n      const updatedBoards = state.map(b => {\r\n        if (board.id === b.id) {\r\n          return { ...board, name: board.name };\r\n        }\r\n        return b;\r\n      });\r\n      return updatedBoards;\r\n    })\r\n)"
            },
            {
                "name": "createBoard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/core/store/actions/boards.action.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    \"[Boards] create board\", \r\n    props<{board: Partial<BoardName>}>()\r\n)"
            },
            {
                "name": "createBoardSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/core/store/actions/boards.action.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    \"[Board] create board success\",\r\n    props<{board: BoardName}>()\r\n)"
            },
            {
                "name": "createCard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/core/store/actions/board.action.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    \"[Board] create card\", \r\n    props<{card: Partial<Card>}>()\r\n)"
            },
            {
                "name": "createCardSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/core/store/actions/board.action.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    \"[Board] create card success\",\r\n    props<{card: Partial<Card>}>()\r\n)"
            },
            {
                "name": "createList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/core/store/actions/board.action.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    \"[Board] create list\",\r\n    props<{list: CreateList}>()\r\n)"
            },
            {
                "name": "createListSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/core/store/actions/board.action.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    \"[Board] create list success\",\r\n    props<{list: CreatedList}>()\r\n)"
            },
            {
                "name": "deleteBoard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/core/store/actions/boards.action.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    \"[Boards] delete board\", \r\n    props<{id: number}>()\r\n)"
            },
            {
                "name": "deleteBoardSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/core/store/actions/boards.action.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    \"[Board] delete board success\",\r\n    props<{id: number}>()\r\n)"
            },
            {
                "name": "deleteCard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/core/store/actions/board.action.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    \"[Board] delete card\", \r\n    props<{id: number}>()\r\n)"
            },
            {
                "name": "deleteCardSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/core/store/actions/board.action.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    \"[Board] delete card success\",\r\n    props<{id: number}>()\r\n)"
            },
            {
                "name": "deleteList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/core/store/actions/board.action.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    \"[Board] delete list\", \r\n    props<{id: number}>()\r\n)"
            },
            {
                "name": "deleteListSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/core/store/actions/board.action.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    \"[Board] delete list success\",\r\n    props<{id: number}>()\r\n)"
            },
            {
                "name": "editBoard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/core/store/actions/boards.action.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    \"[Boards] edit board\", \r\n    props<{payload: BoardName}>()\r\n)"
            },
            {
                "name": "editBoardSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/core/store/actions/boards.action.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    \"[Board] edit board success\",\r\n    props<{board: BoardName}>()\r\n)"
            },
            {
                "name": "editCard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/core/store/actions/board.action.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    \"[Board] edit card\", \r\n    props<{payload: Partial<Card>}>()\r\n)"
            },
            {
                "name": "editCardSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/core/store/actions/board.action.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    \"[Board] edit card success\",\r\n    props<{card: Partial<Card>}>()\r\n)"
            },
            {
                "name": "editList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/core/store/actions/board.action.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    \"[Board] edit list\",\r\n    props<{list: EditList}>()\r\n)"
            },
            {
                "name": "editListSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/core/store/actions/board.action.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    \"[Board] edit list success\",\r\n    props<{list: EditList}>()\r\n)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  apiUrl: \"http://localhost:5000/api/\",\r\n  production: true\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  apiUrl: \"http://localhost:5000/api/\",\r\n  production: false\r\n}"
            },
            {
                "name": "getBoard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/core/store/actions/board.action.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    \"[Board] get board\",\r\n    props<{id: number}>()\r\n)"
            },
            {
                "name": "getBoard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/core/store/actions/boards.action.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    \"[Boards] get board\",\r\n    props<{id: number}>()\r\n)"
            },
            {
                "name": "getBoards",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/core/store/actions/boards.action.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\"[Boards] get boards\")"
            },
            {
                "name": "getBoardsSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/core/store/actions/boards.action.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    \"[Boards] get boards success\", \r\n    props<{allBoards: BoardName[]}>()\r\n)"
            },
            {
                "name": "getBoardSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/core/store/actions/board.action.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    \"[Board] get board success\", \r\n    props<{board: Board}>()\r\n)"
            },
            {
                "name": "getBoardSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/core/store/actions/boards.action.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    \"[Boards] get board success\", \r\n    props<{board: Board}>()\r\n)"
            },
            {
                "name": "initialBoardsState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/core/store/state/boards.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "BoardName[]",
                "defaultValue": "[]"
            },
            {
                "name": "initialBoardState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/core/store/state/board.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Board",
                "defaultValue": "{\r\n    id: 0,\r\n    name: '',\r\n    lists: [],\r\n    listNames: []\r\n}"
            },
            {
                "name": "selectBoard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/core/store/selectors/board.selector.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<Board>(\"board\")"
            },
            {
                "name": "selectBoards",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/core/store/selectors/boards.selector.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<BoardName[]>(\"boardNames\")"
            },
            {
                "name": "selectSortedBoard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/core/store/selectors/board.selector.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectBoard,\r\n    (board: Board) => ({\r\n      ...board,\r\n      lists: board.lists.slice().sort((a, b) => a.id - b.id)\r\n    })\r\n)"
            },
            {
                "name": "selectSortedBoards",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/core/store/selectors/boards.selector.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectBoards,\r\n    (boards: BoardName[]) => ({\r\n      boards: boards.slice().sort((a, b) => a.id - b.id)\r\n    })\r\n)"
            }
        ],
        "functions": [
            {
                "name": "boardReducer",
                "file": "src/app/modules/core/store/reducers/board.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "boardsReducer",
                "file": "src/app/modules/core/store/reducers/boards.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/modules/core/store/reducers/board.reducer.ts": [
                {
                    "name": "_boardReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/core/store/reducers/board.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n    initialBoardState, \r\n    on(getBoardSuccess, (_, { board }) => board),\r\n    on(createListSuccess, (state, { list }) => ({ \r\n        ...state,\r\n        lists: [...state.lists, { ...list, cards: [] }],\r\n        listNames: [...state.listNames, {...list}]\r\n    })),\r\n    on(deleteListSuccess, (state, { id }) => ({ \r\n        ...state,\r\n        lists: state.lists.filter(list => list.id !== id) \r\n    })),\r\n    on(editListSuccess, (state, { list }) => ({ \r\n        ...state,\r\n        lists: state.lists.map(existingList => \r\n          existingList.id === list.listId ? { ...existingList, name: list.name } : existingList\r\n        ),\r\n        listNames: state.lists.map(existingList => \r\n          existingList.id === list.listId ? { ...existingList, name: list.name } : existingList\r\n        )\r\n    })),\r\n    on(createCardSuccess, (state, { card }) => {\r\n        const listToUpdate = state.lists.find(list => list.id === card.listId);\r\n        if (!listToUpdate) {\r\n          return state; \r\n        }\r\n    \r\n        const updatedList: any = {\r\n          ...listToUpdate,\r\n          cards: [...listToUpdate.cards, card]\r\n        };\r\n    \r\n        const updatedLists = state.lists.map(list =>\r\n          list.id === updatedList.id ? updatedList : list\r\n        );\r\n\r\n        return {\r\n          ...state,\r\n          lists: updatedLists\r\n        };\r\n    }),\r\n    on(deleteCardSuccess, (state, { id }) => { \r\n        const listToUpdate = state.lists.find(list => list.cards.some(card => card.id === id));\r\n        if (!listToUpdate) {\r\n          return state; \r\n        }\r\n    \r\n        const updatedCards = listToUpdate.cards.filter(card => card.id !== id);\r\n    \r\n        const updatedList: List = {\r\n          ...listToUpdate,\r\n          cards: updatedCards\r\n        };\r\n    \r\n        const updatedLists = state.lists.map(list =>\r\n          list.id === updatedList.id ? updatedList : list\r\n        );\r\n\r\n        return {\r\n          ...state,\r\n          lists: updatedLists\r\n        };\r\n    }),\r\n    on(editCardSuccess, (state, { card }) => {\r\n      let initialList: List | undefined;\r\n      let newList: List | undefined;\r\n      let updatedList: List | undefined;\r\n      let editedCard: Card | undefined;\r\n      let newCard: Partial<Card> | undefined;\r\n\r\n      state.lists.forEach(list => {\r\n          const cardIndex = list.cards.findIndex(c => c.id === card.id);\r\n          if (cardIndex !== -1) {\r\n            initialList = list; \r\n            editedCard = list.cards[cardIndex];\r\n          }\r\n      });\r\n\r\n      if (initialList && editedCard){\r\n        if (initialList.id === card.listId) {\r\n          newCard = {\r\n            id: card.id,\r\n            name: card.name === undefined ? editedCard.name : card.name,\r\n            description: card.description === undefined ? editedCard.description : card.description,\r\n            dueDate: card.dueDate === undefined ? editedCard.dueDate : card.dueDate,\r\n            priority: card.priority === undefined ? editedCard.priority : card.priority,\r\n            listId: card.listId === undefined ? editedCard.listId : card.listId,\r\n            boardId: card.boardId === undefined ? editedCard.boardId : card.boardId\r\n          };\r\n          initialList = {\r\n            ...initialList,\r\n            cards: initialList.cards.filter(card => card.id !== editedCard?.id)\r\n          }\r\n          const updatedCards = [...initialList.cards, newCard];\r\n          initialList = {\r\n            ...initialList,\r\n            cards: updatedCards\r\n          } as List;\r\n        } else { \r\n          initialList = {\r\n            ...initialList,\r\n            cards: initialList.cards.filter(card => card.id !== editedCard?.id)\r\n          }\r\n          newList = state.lists.find(l => l.id === card.listId);\r\n          const updatedCards = [...newList!.cards, card];\r\n          updatedList = {\r\n            ...newList,\r\n            cards: updatedCards as Card[]\r\n          } as List;\r\n        }\r\n      }\r\n  \r\n      let updatedLists: any[];\r\n\r\n      if (updatedList){\r\n        updatedLists = state.lists.filter(l => l.id !== updatedList!.id && l.id !== initialList!.id);\r\n        updatedLists = [...updatedLists, initialList, updatedList];\r\n      } else {\r\n        updatedLists = state.lists.filter(l => l.id !== initialList!.id);\r\n        updatedLists = [...updatedLists, initialList];\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        lists: updatedLists,\r\n      };\r\n    })\r\n)"
                }
            ],
            "src/app/modules/core/store/reducers/boards.reducer.ts": [
                {
                    "name": "_boardsReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/core/store/reducers/boards.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n    initialBoardsState, \r\n    on(getBoardsSuccess, (_, { allBoards }) => allBoards),\r\n    on(createBoardSuccess, (state, { board }) => [board, ...state]),\r\n    on(deleteBoardSuccess, (state, { id }) => state.filter(board => board.id !== id)),\r\n    on(editBoardSuccess, (state, { board }) => {\r\n      const updatedBoards = state.map(b => {\r\n        if (board.id === b.id) {\r\n          return { ...board, name: board.name };\r\n        }\r\n        return b;\r\n      });\r\n      return updatedBoards;\r\n    })\r\n)"
                }
            ],
            "src/app/modules/core/store/actions/boards.action.ts": [
                {
                    "name": "createBoard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/core/store/actions/boards.action.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    \"[Boards] create board\", \r\n    props<{board: Partial<BoardName>}>()\r\n)"
                },
                {
                    "name": "createBoardSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/core/store/actions/boards.action.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    \"[Board] create board success\",\r\n    props<{board: BoardName}>()\r\n)"
                },
                {
                    "name": "deleteBoard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/core/store/actions/boards.action.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    \"[Boards] delete board\", \r\n    props<{id: number}>()\r\n)"
                },
                {
                    "name": "deleteBoardSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/core/store/actions/boards.action.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    \"[Board] delete board success\",\r\n    props<{id: number}>()\r\n)"
                },
                {
                    "name": "editBoard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/core/store/actions/boards.action.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    \"[Boards] edit board\", \r\n    props<{payload: BoardName}>()\r\n)"
                },
                {
                    "name": "editBoardSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/core/store/actions/boards.action.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    \"[Board] edit board success\",\r\n    props<{board: BoardName}>()\r\n)"
                },
                {
                    "name": "getBoard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/core/store/actions/boards.action.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    \"[Boards] get board\",\r\n    props<{id: number}>()\r\n)"
                },
                {
                    "name": "getBoards",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/core/store/actions/boards.action.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\"[Boards] get boards\")"
                },
                {
                    "name": "getBoardsSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/core/store/actions/boards.action.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    \"[Boards] get boards success\", \r\n    props<{allBoards: BoardName[]}>()\r\n)"
                },
                {
                    "name": "getBoardSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/core/store/actions/boards.action.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    \"[Boards] get board success\", \r\n    props<{board: Board}>()\r\n)"
                }
            ],
            "src/app/modules/core/store/actions/board.action.ts": [
                {
                    "name": "createCard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/core/store/actions/board.action.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    \"[Board] create card\", \r\n    props<{card: Partial<Card>}>()\r\n)"
                },
                {
                    "name": "createCardSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/core/store/actions/board.action.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    \"[Board] create card success\",\r\n    props<{card: Partial<Card>}>()\r\n)"
                },
                {
                    "name": "createList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/core/store/actions/board.action.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    \"[Board] create list\",\r\n    props<{list: CreateList}>()\r\n)"
                },
                {
                    "name": "createListSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/core/store/actions/board.action.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    \"[Board] create list success\",\r\n    props<{list: CreatedList}>()\r\n)"
                },
                {
                    "name": "deleteCard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/core/store/actions/board.action.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    \"[Board] delete card\", \r\n    props<{id: number}>()\r\n)"
                },
                {
                    "name": "deleteCardSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/core/store/actions/board.action.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    \"[Board] delete card success\",\r\n    props<{id: number}>()\r\n)"
                },
                {
                    "name": "deleteList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/core/store/actions/board.action.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    \"[Board] delete list\", \r\n    props<{id: number}>()\r\n)"
                },
                {
                    "name": "deleteListSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/core/store/actions/board.action.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    \"[Board] delete list success\",\r\n    props<{id: number}>()\r\n)"
                },
                {
                    "name": "editCard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/core/store/actions/board.action.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    \"[Board] edit card\", \r\n    props<{payload: Partial<Card>}>()\r\n)"
                },
                {
                    "name": "editCardSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/core/store/actions/board.action.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    \"[Board] edit card success\",\r\n    props<{card: Partial<Card>}>()\r\n)"
                },
                {
                    "name": "editList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/core/store/actions/board.action.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    \"[Board] edit list\",\r\n    props<{list: EditList}>()\r\n)"
                },
                {
                    "name": "editListSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/core/store/actions/board.action.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    \"[Board] edit list success\",\r\n    props<{list: EditList}>()\r\n)"
                },
                {
                    "name": "getBoard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/core/store/actions/board.action.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    \"[Board] get board\",\r\n    props<{id: number}>()\r\n)"
                },
                {
                    "name": "getBoardSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/core/store/actions/board.action.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    \"[Board] get board success\", \r\n    props<{board: Board}>()\r\n)"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  apiUrl: \"http://localhost:5000/api/\",\r\n  production: true\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  apiUrl: \"http://localhost:5000/api/\",\r\n  production: false\r\n}"
                }
            ],
            "src/app/modules/core/store/state/boards.state.ts": [
                {
                    "name": "initialBoardsState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/core/store/state/boards.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BoardName[]",
                    "defaultValue": "[]"
                }
            ],
            "src/app/modules/core/store/state/board.state.ts": [
                {
                    "name": "initialBoardState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/core/store/state/board.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Board",
                    "defaultValue": "{\r\n    id: 0,\r\n    name: '',\r\n    lists: [],\r\n    listNames: []\r\n}"
                }
            ],
            "src/app/modules/core/store/selectors/board.selector.ts": [
                {
                    "name": "selectBoard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/core/store/selectors/board.selector.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<Board>(\"board\")"
                },
                {
                    "name": "selectSortedBoard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/core/store/selectors/board.selector.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectBoard,\r\n    (board: Board) => ({\r\n      ...board,\r\n      lists: board.lists.slice().sort((a, b) => a.id - b.id)\r\n    })\r\n)"
                }
            ],
            "src/app/modules/core/store/selectors/boards.selector.ts": [
                {
                    "name": "selectBoards",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/core/store/selectors/boards.selector.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<BoardName[]>(\"boardNames\")"
                },
                {
                    "name": "selectSortedBoards",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/core/store/selectors/boards.selector.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectBoards,\r\n    (boards: BoardName[]) => ({\r\n      boards: boards.slice().sort((a, b) => a.id - b.id)\r\n    })\r\n)"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/modules/core/store/reducers/board.reducer.ts": [
                {
                    "name": "boardReducer",
                    "file": "src/app/modules/core/store/reducers/board.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/modules/core/store/reducers/boards.reducer.ts": [
                {
                    "name": "boardsReducer",
                    "file": "src/app/modules/core/store/reducers/boards.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "HomeComponent"
                    },
                    {
                        "path": "boards/:id",
                        "component": "BoardComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/boards/components/board-item/board-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BoardItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/boards/components/board/board.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BoardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/boards/components/boards/boards.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BoardsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/boards/models/board.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Board",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/boards/models/board.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BoardName",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/boards/models/board.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BoardsResponse",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/boards/models/board.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "EditBoard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/boards/services/boards.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BoardsService",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/cards/components/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/cards/models/card.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Card",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/cards/services/cards.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CardsService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core/interceptors/error.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "ErrorInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core/interceptors/loading.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "LoadingInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core/services/loading.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoadingService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core/store/actions/board.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createCard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core/store/actions/board.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createCardSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core/store/actions/board.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core/store/actions/board.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createListSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core/store/actions/board.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteCard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core/store/actions/board.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteCardSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core/store/actions/board.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core/store/actions/board.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteListSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core/store/actions/board.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "editCard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core/store/actions/board.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "editCardSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core/store/actions/board.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "editList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core/store/actions/board.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "editListSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core/store/actions/board.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getBoard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core/store/actions/board.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getBoardSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core/store/actions/boards.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createBoard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core/store/actions/boards.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createBoardSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core/store/actions/boards.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteBoard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core/store/actions/boards.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteBoardSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core/store/actions/boards.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "editBoard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core/store/actions/boards.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "editBoardSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core/store/actions/boards.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getBoard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core/store/actions/boards.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getBoards",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core/store/actions/boards.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getBoardsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core/store/actions/boards.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getBoardSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core/store/effects/board.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BoardEffects",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core/store/effects/boards.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BoardsEffects",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core/store/reducers/board.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "boardReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core/store/reducers/board.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "_boardReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core/store/reducers/boards.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "boardsReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core/store/reducers/boards.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "_boardsReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core/store/selectors/board.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectBoard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core/store/selectors/board.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSortedBoard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core/store/selectors/boards.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectBoards",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core/store/selectors/boards.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSortedBoards",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core/store/state/board.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialBoardState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core/store/state/boards.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialBoardsState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/history/components/activity/activity.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ActivityComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/history/components/history/history.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HistoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/history/models/activity.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Activity",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/history/models/activity.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ActivityResponse",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/history/services/history.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HistoryService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/home/components/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/lists/components/add-list/add-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/lists/components/edit-list/edit-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/lists/components/list/list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/lists/components/lists/lists.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/lists/models/list.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CreatedList",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/lists/models/list.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CreateList",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/lists/models/list.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "EditList",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/lists/models/list.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "List",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/lists/models/list.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Lists",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/lists/models/list.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ListsWithIds",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/lists/services/lists.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ListsService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/modals/components/add-card/add-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/modals/components/create-board/create-board.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateBoardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/modals/components/edit-board/edit-board.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditBoardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/modals/components/edit-card/edit-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/modals/components/open-card/open-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OpenCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/modals/models/list.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "List",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/modals/services/format-date.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FormatDateService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/components/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/components/date-picker/date-picker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DatePickerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/components/input/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/components/modal/modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}